<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mingshan Lei&#39;s Blog</title>
  
  <subtitle>Tech Share</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://leimingshan.github.io/"/>
  <updated>2018-09-03T09:28:48.633Z</updated>
  <id>http://leimingshan.github.io/</id>
  
  <author>
    <name>Mingshan Lei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JDK11-ZGC</title>
    <link href="http://leimingshan.github.io/2018/09/03/JDK11-ZGC/"/>
    <id>http://leimingshan.github.io/2018/09/03/JDK11-ZGC/</id>
    <published>2018-09-03T05:52:32.000Z</published>
    <updated>2018-09-03T09:28:48.633Z</updated>
    
    <content type="html"><![CDATA[<p>JDK 11即将于09/25正式发布，包含了诸多新的特性，主要的新特性JEP(JDK Enhancement Proposal 特性增强提议)有17个，参见下表</p><ul><li>181: Nest-Based Access Control</li><li>309: Dynamic Class-File Constants</li><li>315: Improve Aarch64 Intrinsics</li><li>318: Epsilon: A No-Op Garbage Collector</li><li>320: Remove the Java EE and CORBA Modules</li><li>321: HTTP Client (Standard)</li><li>323: Local-Variable Syntax for Lambda Parameters</li><li>324: Key Agreement with Curve25519 and Curve448</li><li>327: Unicode 10</li><li>328: Flight Recorder</li><li>329: ChaCha20 and Poly1305 Cryptographic Algorithms</li><li>330: Launch Single-File Source-Code Programs</li><li>331: Low-Overhead Heap Profiling</li><li>332: Transport Layer Security (TLS) 1.3</li><li>333: ZGC: A Scalable Low-Latency Garbage Collector(Experimental)</li><li>335: Deprecate the Nashorn JavaScript Engine</li><li>336: Deprecate the Pack200 Tools and API</li></ul><p>其中，非常值得大家关注的是JEP-333，ZGC，一个可扩展的低延迟垃圾回收器。ZGC暂时是实验性质的。<br><a id="more"></a></p><p>ZGC可以并发执行以下GC任务/阶段：</p><ul><li>标记（Marking）</li><li>引用处理（Reference processing）</li><li>重新分配集的选择（Relocation set selection）</li><li>重分配/压缩（Relocation/Compaction）</li></ul><p>ZGC的核心设计原则是使用负载屏障（load barrier）与有色指针对象（colored object pointers，colored oops）组合。这使得ZGC能够进行并发操作，比如对象的重定位，Java应用程序线程正在运行时，从Java线程的角度，在Java对象中加载引用字段的行为是会受到负载障碍的影响。除了对象地址以外，有色对象指针包含负载障碍所需的其他信息，用来确定Java线程在使用指针之前是否需要执行某些操作，例如，该对象可能已被重新定位，负载屏障将检测到这种情况并采取合适的行为。</p><p><a href="http://openjdk.java.net/projects/jdk/11/" target="_blank" rel="noopener">JDK 11</a><br><a href="http://openjdk.java.net/jeps/333" target="_blank" rel="noopener">JEP 333: ZGC: A Scalable Low-Latency Garbage Collector</a><br><a href="https://wiki.openjdk.java.net/display/zgc/Main" target="_blank" rel="noopener">OpenJDK Wiki About ZGC</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JDK 11即将于09/25正式发布，包含了诸多新的特性，主要的新特性JEP(JDK Enhancement Proposal 特性增强提议)有17个，参见下表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;181: Nest-Based Access Control&lt;/li&gt;
&lt;li&gt;309: Dynamic Class-File Constants&lt;/li&gt;
&lt;li&gt;315: Improve Aarch64 Intrinsics&lt;/li&gt;
&lt;li&gt;318: Epsilon: A No-Op Garbage Collector&lt;/li&gt;
&lt;li&gt;320: Remove the Java EE and CORBA Modules&lt;/li&gt;
&lt;li&gt;321: HTTP Client (Standard)&lt;/li&gt;
&lt;li&gt;323: Local-Variable Syntax for Lambda Parameters&lt;/li&gt;
&lt;li&gt;324: Key Agreement with Curve25519 and Curve448&lt;/li&gt;
&lt;li&gt;327: Unicode 10&lt;/li&gt;
&lt;li&gt;328: Flight Recorder&lt;/li&gt;
&lt;li&gt;329: ChaCha20 and Poly1305 Cryptographic Algorithms&lt;/li&gt;
&lt;li&gt;330: Launch Single-File Source-Code Programs&lt;/li&gt;
&lt;li&gt;331: Low-Overhead Heap Profiling&lt;/li&gt;
&lt;li&gt;332: Transport Layer Security (TLS) 1.3&lt;/li&gt;
&lt;li&gt;333: ZGC: A Scalable Low-Latency Garbage Collector(Experimental)&lt;/li&gt;
&lt;li&gt;335: Deprecate the Nashorn JavaScript Engine&lt;/li&gt;
&lt;li&gt;336: Deprecate the Pack200 Tools and API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，非常值得大家关注的是JEP-333，ZGC，一个可扩展的低延迟垃圾回收器。ZGC暂时是实验性质的。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://leimingshan.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://leimingshan.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>推荐计算机科学书籍</title>
    <link href="http://leimingshan.github.io/2018/08/30/douban-computer-books/"/>
    <id>http://leimingshan.github.io/2018/08/30/douban-computer-books/</id>
    <published>2018-08-30T06:01:49.000Z</published>
    <updated>2018-08-30T06:22:11.818Z</updated>
    
    <content type="html"><![CDATA[<p>值得一读的高分计算机书籍：<br><a href="https://www.douban.com/doulist/37472347/?start=0&amp;sort=seq&amp;playable=0&amp;sub_type=" target="_blank" rel="noopener">https://www.douban.com/doulist/37472347/?start=0&amp;sort=seq&amp;playable=0&amp;sub_type=</a></p><p>从我的角度来看呢，高级程序员推荐必读</p><h1 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h1><p><a href="https://book.douban.com/subject/5407246/" target="_blank" rel="noopener">深入理解计算机系统（英文版·第2版）</a></p><h1 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h1><p><a href="https://book.douban.com/subject/10746113/" target="_blank" rel="noopener">HTTP权威指南</a></p><p><a href="https://book.douban.com/subject/25863515/" target="_blank" rel="noopener">图解HTTP</a></p><p><a href="https://book.douban.com/subject/1088054/" target="_blank" rel="noopener">TCP/IP详解 卷1：协议</a></p><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p><a href="https://book.douban.com/subject/27096665/" target="_blank" rel="noopener">现代操作系统（原书第4版）</a></p><p><a href="http://pages.cs.wisc.edu/~remzi/OSTEP/#book-chapters" target="_blank" rel="noopener">Operating Systems</a> 在线免费版本</p><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p><a href="https://book.douban.com/subject/23008813/" target="_blank" rel="noopener">高性能MySQL</a></p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p><a href="https://book.douban.com/subject/19952400/" target="_blank" rel="noopener">算法（第4版）</a></p><p><a href="https://book.douban.com/subject/20432061/" target="_blank" rel="noopener">算法导论（原书第3版）</a></p><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;值得一读的高分计算机书籍：&lt;br&gt;&lt;a href=&quot;https://www.douban.com/doulist/37472347/?start=0&amp;amp;sort=seq&amp;amp;playable=0&amp;amp;sub_type=&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Elasticsearch-nested-query</title>
    <link href="http://leimingshan.github.io/2018/08/27/Elasticsearch-nested-query/"/>
    <id>http://leimingshan.github.io/2018/08/27/Elasticsearch-nested-query/</id>
    <published>2018-08-27T05:23:35.000Z</published>
    <updated>2018-08-27T06:15:38.057Z</updated>
    
    <content type="html"><![CDATA[<p>Elasticsearch嵌套查询，具体可参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-nested-query.html" target="_blank" rel="noopener">Nested Query</a>.</p><p>建议还是要多看多熟悉Elasticsearch的官方文档，比到处去搜强多了。</p><p>简而言之，在对ES doc的多层嵌套对象进行查询的时候，要使用Nested Query，常规查询无效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;nested&quot; : &#123;</span><br><span class="line">            &quot;path&quot; : &quot;obj&quot;,</span><br><span class="line">            &quot;query&quot; : &#123;</span><br><span class="line">                &quot;bool&quot; : &#123;</span><br><span class="line">                    &quot;must&quot; : [</span><br><span class="line">                        &#123; &quot;match&quot; : &#123;&quot;obj.info.name&quot; : &quot;zhangsan&quot;&#125; &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Elasticsearch嵌套查询，具体可参考&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-nested-query.html&quot; target=&quot;_bla
      
    
    </summary>
    
    
      <category term="elasticsearch" scheme="http://leimingshan.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>RBAC简要设计</title>
    <link href="http://leimingshan.github.io/2018/06/07/RBAC-system-design/"/>
    <id>http://leimingshan.github.io/2018/06/07/RBAC-system-design/</id>
    <published>2018-06-07T05:49:24.000Z</published>
    <updated>2018-08-28T08:58:39.113Z</updated>
    
    <content type="html"><![CDATA[<p>Role-Based-Access-Control System Design.<br>比较常见的基于角色的访问控制系统，这次是主要了解和简单设计，不涉及到特别复杂的功能。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>参考文档：<a href="https://blog.csdn.net/yangwenxue_admin/article/details/73936803" target="_blank" rel="noopener">https://blog.csdn.net/yangwenxue_admin/article/details/73936803</a></p><p>RBAC（Role-Based Access Control，基于角色的访问控制），就是用户<strong>通过角色与权限进行关联</strong>。</p><p>其主要特点如下：</p><p>一个用户拥有若干角色，每一个角色拥有若干权限。这样，就构造成“用户-角色-权限”的授权模型。<br>这种模型中，用户与角色之间，角色与权限之间，一般是多对多的关系。<br>在此基础上，可以扩展出用户组等实体类型。<br>根据实际需求，可以考虑增加用户组，并对具体权限的类型进行了细分。<br><a id="more"></a></p><h1 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h1><p>角色是什么？可以理解为一定数量的权限的集合，权限的载体。例如：一个论坛系统，“超级管理员”、“版主”都是角色。版主可管理版内的帖子、可管理版内的用户等，这些是权限。要给某个用户授予这些权限，不需要直接将权限授予用户，可将“版主”这个角色赋予该用户。  </p><h1 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h1><p>当用户的数量非常大时，要给系统每个用户逐一授权（授角色），是件非常烦琐的事情。这时，就需要给用户分组，每个用户组内有多个用户。</p><p>除了可给用户授权外，还可以给用户组授权。这样一来，用户拥有的所有权限，就是用户个人拥有的权限与该用户所在用户组拥有的权限之和。</p><h1 id="权限类型"><a href="#权限类型" class="headerlink" title="权限类型"></a>权限类型</h1><p>权限细分出“权限类型”，我们根据它的取值来区分是哪一类权限，进而与特定的表进行关联。如“MENU”表示菜单的访问权限、“RESOURCE”表示可供访问的URL、“FILE”表示文件的修改权限等。 </p><p>这样设计的好处有二：</p><ul><li>不需要区分哪些是权限操作，哪些是资源，（实际上，有时候也不好区分，如菜单，把它理解为资源呢还是功能模块权限呢？）。</li><li>方便扩展，当系统要对新的内容或实体进行权限控制时，我只需要建立一个新的关联表“权限XX关联表”，并确定这类权限的权限类型字符串。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Role-Based-Access-Control System Design.&lt;br&gt;比较常见的基于角色的访问控制系统，这次是主要了解和简单设计，不涉及到特别复杂的功能。&lt;/p&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;参考文档：&lt;a href=&quot;https://blog.csdn.net/yangwenxue_admin/article/details/73936803&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/yangwenxue_admin/article/details/73936803&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RBAC（Role-Based Access Control，基于角色的访问控制），就是用户&lt;strong&gt;通过角色与权限进行关联&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;其主要特点如下：&lt;/p&gt;
&lt;p&gt;一个用户拥有若干角色，每一个角色拥有若干权限。这样，就构造成“用户-角色-权限”的授权模型。&lt;br&gt;这种模型中，用户与角色之间，角色与权限之间，一般是多对多的关系。&lt;br&gt;在此基础上，可以扩展出用户组等实体类型。&lt;br&gt;根据实际需求，可以考虑增加用户组，并对具体权限的类型进行了细分。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://leimingshan.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://leimingshan.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Docker-Basic</title>
    <link href="http://leimingshan.github.io/2018/01/25/Docker-Basic/"/>
    <id>http://leimingshan.github.io/2018/01/25/Docker-Basic/</id>
    <published>2018-01-25T07:45:10.000Z</published>
    <updated>2018-08-28T09:10:51.135Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于生产环境的上线部署，都依赖于镜像构建、制作、部署上线运行等操作，作为一名合格的RD，当然不能只局限于在上线平台上进行一顿鼠标操作了，一定要弄懂这些基础设施内部到底在干嘛。因此，对Docker的相关学习也是很有必要的。</p><h1 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h1><p><a href="http://dockone.io/article/783" target="_blank" rel="noopener">http://dockone.io/article/783</a></p><p><a href="http://merrigrove.blogspot.com/2015/10/visualizing-docker-containers-and-images.html" target="_blank" rel="noopener">http://merrigrove.blogspot.com/2015/10/visualizing-docker-containers-and-images.html</a></p><p>两篇文章分别是中文和英文原版，建议初学者多读几遍，收获非常大。<br>尤其是对镜像只读层和读写层的理解，非常重要，还有docker各个命令对各层的影响。<br><a id="more"></a></p><h1 id="Docker-run"><a href="#Docker-run" class="headerlink" title="Docker run"></a>Docker run</h1><p><a href="https://docs.docker.com/engine/reference/commandline/run/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/run/</a></p><p>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p><p>常用选项：</p><ul><li>–detach , -d        Run container in background and print container ID</li><li>–tty , -t        Allocate a pseudo-TTY</li><li>–interactive , -i        Keep STDIN open even if not attached</li><li>–publish , -p        Publish a container’s port(s) to the host</li><li>–volume , -v        Bind mount a volume</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// sshd -D 将 sshd 作为前台进程运行，而不是脱离控制台成为后台守护进程。主要用于调试。</span><br><span class="line">// -it 通常一起使用，可以开启一个终端进去交互模式，调试时很有用。</span><br><span class="line">docker run -d -p 2222:22 tomcat:centos /usr/sbin/sshd -D</span><br><span class="line"></span><br><span class="line">docker run -ti -v ~/Downloads:/Downloads tomcat:centos /bin/bash</span><br><span class="line"></span><br><span class="line">docker run -d -p 8000:8080 -p 1098:1099 tomcat:centos /usr/local/sbin/tomcat.sh</span><br><span class="line"></span><br><span class="line">docker run -it -p 8000:8080 -p 1098:1099 tomcat:centos /usr/local/sbin/tomcat.sh</span><br></pre></td></tr></table></figure><h1 id="其他Docker命令"><a href="#其他Docker命令" class="headerlink" title="其他Docker命令"></a>其他Docker命令</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ul><li>docker version</li><li>docker info</li><li>docker stop $(docker ps -aq)</li><li>docker rm $(docker ps -aq)</li><li>docker pull</li><li>docker login</li><li>docerk rmi</li><li>docker images</li></ul><h2 id="镜像类"><a href="#镜像类" class="headerlink" title="镜像类"></a>镜像类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 检索image</span><br><span class="line">$docker search image_name</span><br><span class="line"></span><br><span class="line"># 下载image</span><br><span class="line">$docker pull image_name</span><br><span class="line"></span><br><span class="line"># 列出镜像列表; -a, --all=false Show all images; --no-trunc=false Don&apos;t truncate output; -q, --quiet=false Only show numeric IDs</span><br><span class="line">$docker images</span><br><span class="line"></span><br><span class="line"># 删除一个或者多个镜像; -f, --force=false Force; --no-prune=false Do not delete untagged parents</span><br><span class="line">$docker rmi image_name</span><br><span class="line"></span><br><span class="line"># 显示一个镜像的历史; --no-trunc=false Don&apos;t truncate output; -q, --quiet=false Only show numeric IDs</span><br><span class="line">$docker history image_name</span><br></pre></td></tr></table></figure><h2 id="容器类"><a href="#容器类" class="headerlink" title="容器类"></a>容器类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># 列出当前所有正在运行的container</span><br><span class="line">$docker ps</span><br><span class="line"># 列出所有的container</span><br><span class="line">$docker ps -a</span><br><span class="line"># 列出最近一次启动的container</span><br><span class="line">$docker ps -l</span><br><span class="line"></span><br><span class="line"># 保存对容器的修改; -a, --author=&quot;&quot; Author; -m, --message=&quot;&quot; Commit message  </span><br><span class="line">$docker commit ID new_image_name</span><br><span class="line"></span><br><span class="line"># 删除所有容器</span><br><span class="line">$docker rm `docker ps -a -q`</span><br><span class="line">  </span><br><span class="line"># 删除单个容器; -f, --force=false; -l, --link=false Remove the specified link and not the underlying container; -v, --volumes=false Remove the volumes associated to the container</span><br><span class="line">$docker rm Name/ID</span><br><span class="line"></span><br><span class="line"># 停止、启动、杀死一个容器</span><br><span class="line">$docker stop Name/ID</span><br><span class="line">$docker start Name/ID</span><br><span class="line">$docker kill Name/ID</span><br><span class="line"></span><br><span class="line"># 从一个容器中取日志; -f, --follow=false Follow log output; -t, --timestamps=false Show timestamps</span><br><span class="line">$docker logs Name/ID</span><br><span class="line">  </span><br><span class="line"># 列出一个容器里面被改变的文件或者目录，list列表会显示出三种事件，A 增加的，D 删除的，C 被改变的</span><br><span class="line">$docker diff Name/ID</span><br><span class="line">  </span><br><span class="line"># 显示一个运行的容器里面的进程信息</span><br><span class="line">$docker top Name/ID</span><br><span class="line"></span><br><span class="line"># 从容器里面拷贝文件/目录到本地一个路径  </span><br><span class="line">$docker cp Name:/container_path to_path</span><br><span class="line">$docker cp ID:/container_path to_path</span><br><span class="line"></span><br><span class="line"># 重启一个正在运行的容器; -t, --time=10 Number of seconds to try to stop for before killing the container, Default=10</span><br><span class="line">$docker restart Name/ID</span><br><span class="line"></span><br><span class="line"># 附加到一个运行的容器上面; --no-stdin=false Do not attach stdin; --sig-proxy=true Proxify all received signal to the process  </span><br><span class="line">$docker attach ID</span><br></pre></td></tr></table></figure><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><p>to be continued</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鉴于生产环境的上线部署，都依赖于镜像构建、制作、部署上线运行等操作，作为一名合格的RD，当然不能只局限于在上线平台上进行一顿鼠标操作了，一定要弄懂这些基础设施内部到底在干嘛。因此，对Docker的相关学习也是很有必要的。&lt;/p&gt;
&lt;h1 id=&quot;基础信息&quot;&gt;&lt;a href=&quot;#基础信息&quot; class=&quot;headerlink&quot; title=&quot;基础信息&quot;&gt;&lt;/a&gt;基础信息&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://dockone.io/article/783&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://dockone.io/article/783&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://merrigrove.blogspot.com/2015/10/visualizing-docker-containers-and-images.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://merrigrove.blogspot.com/2015/10/visualizing-docker-containers-and-images.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;两篇文章分别是中文和英文原版，建议初学者多读几遍，收获非常大。&lt;br&gt;尤其是对镜像只读层和读写层的理解，非常重要，还有docker各个命令对各层的影响。&lt;br&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://leimingshan.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Hexo启用Https后设置腾讯公益404的问题</title>
    <link href="http://leimingshan.github.io/2017/08/30/hexo-gongyi-404/"/>
    <id>http://leimingshan.github.io/2017/08/30/hexo-gongyi-404/</id>
    <published>2017-08-30T07:12:16.000Z</published>
    <updated>2018-08-30T07:24:18.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h2><p>执行<br>hexo new page 404</p><h2 id="修改source-404-index-md"><a href="#修改source-404-index-md" class="headerlink" title="修改source/404/index.md"></a>修改source/404/index.md</h2><p>一些老的页面会出现问题，因为启用了Https后，去加载Http的样式表和JS会失败，所以要使用以下的页面代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404</span><br><span class="line">date: 2018-08-30 14:40:55</span><br><span class="line">---</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-cn&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">  &lt;title&gt;404&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot; homePageName=&quot;返回宝贝回家&quot; homePageUrl=&quot;https://www.baobeihuijia.com&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;新建页面&quot;&gt;&lt;a href=&quot;#新建页面&quot; class=&quot;headerlink&quot; title=&quot;新建页面&quot;&gt;&lt;/a&gt;新建页面&lt;/h2&gt;&lt;p&gt;执行&lt;br&gt;hexo new page 404&lt;/p&gt;
&lt;h2 id=&quot;修改source-404-index-md&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="网站" scheme="http://leimingshan.github.io/categories/%E7%BD%91%E7%AB%99/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo Basic Usage</title>
    <link href="http://leimingshan.github.io/2016/05/18/Hexo-Basic/"/>
    <id>http://leimingshan.github.io/2016/05/18/Hexo-Basic/</id>
    <published>2016-05-18T06:26:50.000Z</published>
    <updated>2018-08-27T03:44:42.400Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a><br><a id="more"></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>工作一年的技术成长总结</title>
    <link href="http://leimingshan.github.io/2016/04/20/tech-growup-record/"/>
    <id>http://leimingshan.github.io/2016/04/20/tech-growup-record/</id>
    <published>2016-04-20T07:25:21.000Z</published>
    <updated>2018-08-28T07:29:15.195Z</updated>
    
    <content type="html"><![CDATA[<p>工作一年多以来，学了不少东西，也尝试了许多新东西，也成长了不少，也许只是一个粗略的记录，也希望提醒自己，还是取得了一些成绩吧，但不能骄傲，还有许多不足之处，技术永无止境，还需要更多的努力。</p><p>工作初始，接触的是C语言网络编程和后台编程的项目，承担的是整体系统中的一部分，加上之前对Redis的了解，也比较适合在这里使用，在设计的时候也就用上了。因为的自己负责调研的部分，所以许多都可以自己设计，还是很高兴的，在使用Redis的过程中，也简单分析了Redis的代码，以及在Linux下编程的技巧，包括学习Redis的Makefile，对错误和消息的处理等。使用Redis作为缓存队列，也实现了自己想要的效果，当然这里会有更优的解决方案，但是作为自己在项目中的第一个设计，还是基本满意的。</p><p>再后来的项目，大部分的经历就转到Java语言项目和Java Web方面了，也接触了一些项目的框架，修改功能代码等。独当一面的是另外一个基于大数据的演示性项目，将来会把这个搭建在服务器上。这个项目里，我独立完成了项目的Java Web后台设计，使用了包括Spring，Struts，MongoDB，Morphia等技术，独立设计前台HTML和JS等，使用了Bootstrap，Echarts，JQuery，Semantic-ui等。项目的时间比较久，后来还有一些改进方案没来得及实施，但是从我的角度来说，是我的一个大作品。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工作一年多以来，学了不少东西，也尝试了许多新东西，也成长了不少，也许只是一个粗略的记录，也希望提醒自己，还是取得了一些成绩吧，但不能骄傲，还有许多不足之处，技术永无止境，还需要更多的努力。&lt;/p&gt;
&lt;p&gt;工作初始，接触的是C语言网络编程和后台编程的项目，承担的是整体系统中的
      
    
    </summary>
    
      <category term="Diary" scheme="http://leimingshan.github.io/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>Gradle使用代理服务器</title>
    <link href="http://leimingshan.github.io/2016/03/23/gradle/"/>
    <id>http://leimingshan.github.io/2016/03/23/gradle/</id>
    <published>2016-03-23T01:03:16.000Z</published>
    <updated>2018-08-28T08:57:19.979Z</updated>
    
    <content type="html"><![CDATA[<p>在国内使用Gradle的时候，由于依赖管理时经常需要从mavenCentral（maven中央仓库）和jCenter中下载lib，速度不稳定，有时还会导致build长时间卡住，有一种方法是使用Gradle的Offline模式，但前提是你已经cache了项目的依赖在本地，不然可能会Build失败，另外就是使用代理服务器，也是一种不错的选择。</p><p><strong>在Gradle中使用代理服务器的方法：</strong></p><ol><li><strong>使用以下命令行参数指定代理服务器。</strong><br><pre class="lang:default decode:true">gradle -Dhttp.proxyHost=yourProxy -Dhttp.proxyPort=yourPort -Dhttp.proxyUser=usernameProxy -Dhttp.proxyPassword=yourPassoword</pre><a id="more"></a></li><li><strong>修改Gradle用户配置文件。</strong>可以在GRADLE_USER_HOME下新建文件gradle.properties，然后设置代理。GRADLE_USER_HOME的路径一般如下:<br>/home/&lt;username&gt;/.gradle/ (Linux)<br>/Users/&lt;username&gt;/.gradle/ (Mac)<br>C:\Users\&lt;username&gt;.gradle\ (Windows)<br><pre class="lang:default decode:true "># Http Proxy<br>systemProp.http.proxyHost=www.somehost.org<br>systemProp.http.proxyPort=8080<br>systemProp.http.proxyUser=userid<br>systemProp.http.proxyPassword=password<br>systemProp.http.nonProxyHosts=*.nonproxyrepos.com|localhost</pre></li></ol><h1 id="Https-Proxy"><a href="#Https-Proxy" class="headerlink" title="Https Proxy"></a>Https Proxy</h1><p>systemProp.https.proxyHost=www.somehost.org<br>systemProp.https.proxyPort=8080<br>systemProp.https.proxyUser=userid<br>systemProp.https.proxyPassword=password<br>systemProp.https.nonProxyHosts=*.nonproxyrepos.com|localhost<br>参考：</p><ol><li><a href="https://docs.gradle.org/current/userguide/build_environment.html" target="_blank" rel="noopener">https://docs.gradle.org/current/userguide/build_environment.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在国内使用Gradle的时候，由于依赖管理时经常需要从mavenCentral（maven中央仓库）和jCenter中下载lib，速度不稳定，有时还会导致build长时间卡住，有一种方法是使用Gradle的Offline模式，但前提是你已经cache了项目的依赖在本地，不然可能会Build失败，另外就是使用代理服务器，也是一种不错的选择。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在Gradle中使用代理服务器的方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;使用以下命令行参数指定代理服务器。&lt;/strong&gt;&lt;br&gt;&lt;pre class=&quot;lang:default decode:true&quot;&gt;gradle -Dhttp.proxyHost=yourProxy -Dhttp.proxyPort=yourPort -Dhttp.proxyUser=usernameProxy -Dhttp.proxyPassword=yourPassoword&lt;/pre&gt;
    
    </summary>
    
      <category term="Java" scheme="http://leimingshan.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://leimingshan.github.io/tags/Java/"/>
    
      <category term="Gradle" scheme="http://leimingshan.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Bug Tracker</title>
    <link href="http://leimingshan.github.io/2016/03/22/bug-tracker/"/>
    <id>http://leimingshan.github.io/2016/03/22/bug-tracker/</id>
    <published>2016-03-22T14:20:38.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在尝试使用一些项目管理工具，之前的文章里提到的代码质量分析工具SonarQube，比较符合使用的期望，效果也不错，还有比较早使用的持续集成工具Jenkins，</p><p>然后是缺陷跟踪工具，Bug Tracker System，比较常用的有：</p><ol><li>Redmine <a href="http://www.redmine.org/" target="_blank" rel="noopener">http://www.redmine.org/</a> 网站本身就是Redmine示例。</li><li>Mantis <a href="http://www.mantisbt.org/" target="_blank" rel="noopener">http://www.mantisbt.org/</a> demo：<a href="http://www.mantisbt.org/bugs/my_view_page.php" target="_blank" rel="noopener">http://www.mantisbt.org/bugs/my_view_page.php</a>。</li><li>Atlassian JIRA <a href="https://www.atlassian.com/software/jira/" target="_blank" rel="noopener">https://www.atlassian.com/software/jira/</a> 应用广泛，有云服务版。</li><li>Bugzilla <a href="https://www.bugzilla.org/" target="_blank" rel="noopener">https://www.bugzilla.org/</a><br>类似的工具还有许多，可以查看wiki百科汇总 <a href="https://en.wikipedia.org/wiki/Comparison_of_issue-tracking_systems" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Comparison_of_issue-tracking_systems</a>。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在尝试使用一些项目管理工具，之前的文章里提到的代码质量分析工具SonarQube，比较符合使用的期望，效果也不错，还有比较早使用的持续集成工具Jenkins，&lt;/p&gt;
&lt;p&gt;然后是缺陷跟踪工具，Bug Tracker System，比较常用的有：&lt;/p&gt;
&lt;ol&gt;
&lt;l
      
    
    </summary>
    
      <category term="开发" scheme="http://leimingshan.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL database character set encoding</title>
    <link href="http://leimingshan.github.io/2016/03/08/mysql-database-character-set-encoding/"/>
    <id>http://leimingshan.github.io/2016/03/08/mysql-database-character-set-encoding/</id>
    <published>2016-03-08T03:28:16.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用MySQL的时候很可能遇到字符集编码相关的问题，尤其是涉及到数据和程序中有中文字符的时候，如果不注意，可能遇到乱码或一些其他的错误。</p><p>本文详细解释MySQL相关的字符集编码设置和排序规则相关的问题。</p><h1 id="MySQL-Server的默认字符集配置"><a href="#MySQL-Server的默认字符集配置" class="headerlink" title="MySQL Server的默认字符集配置"></a>MySQL Server的默认字符集配置</h1><p>在默认安装MySQL的时候，MySQL Server使用的是英文字符集，服务端的默认配置一般是</p><p><span style="text-decoration: underline;">character-set-server=latin1</span></p><p><span style="text-decoration: underline;">collation-server =latin1_swedish_ci</span></p><p>注意latin1字符集是不支持中文的。第一行的character-set当然是指字符集，第二行的collation是指对应该字符集的比较和排序规则。</p><p><a href="http://dev.mysql.com/doc/refman/5.7/en/charset-server.html" target="_blank" rel="noopener">charset-server参考手册</a><a id="more"></a></p><p>通过MySQL命令</p><p><pre class="lang:mysql decode:true">mysql&gt; SHOW VARIABLES LIKE ‘character%’;</pre><br>可以查看当前服务端的默认配置。</p><p>如果在新建数据库的时候不指定character-set和collation，那么就会采用以上的服务器端默认值，所以还是推荐大家手动指定。示例如下：</p><p><pre class="lang:mysql decode:true ">CREATE DATABASE mydb<br>  DEFAULT CHARACTER SET utf8<br>  DEFAULT COLLATE utf8_general_ci;</pre><br>使用utf8和utf8_general_ci是在中英文应用环境下比较常用的一种设置，排序规则还有utf8_unicode_ci，另外还有编码utf8mb4和对应的排序规则，具体区别会在后面的文章说明。<!--more--></p><h1 id="修改已有数据库的字符编码"><a href="#修改已有数据库的字符编码" class="headerlink" title="修改已有数据库的字符编码"></a>修改已有数据库的字符编码</h1><p>如果之前已经建立好了数据库，需要修改当前数据库的编码，可以使用ALTER DATABASE命令。</p><p>首先查看当前数据库的编码和排序规则；</p><p><pre class="lang:mysql decode:true ">mysql&gt; USE mydb;<br>Database changed<br>mysql&gt; SHOW VARIABLES LIKE ‘character_set_database’;<br>+————————+——-+<br>| Variable_name          | Value |<br>+————————+——-+<br>| character_set_database | utf8  |<br>+————————+——-+<br>1 row in set (0.00 sec)</pre></p><p>mysql&gt; mysql&gt; SHOW VARIABLES LIKE ‘collation_database’;<br>+——————–+—————–+<br>| Variable_name      | Value           |<br>+——————–+—————–+<br>| collation_database | utf8_general_ci |<br>+——————–+—————–+<br>1 row in set (0.01 sec)</p><p>mysql&gt;<br><br>然后就可以根据情况修改为自己需要的编码设置了；</p><p><pre class="lang:mysql decode:true">mysql&gt; ALTER DATABASE databasename CHARACTER SET utf8 COLLATE utf8_general_ci;</pre><br>参考：</p><ul><li><a href="https://dev.mysql.com/doc/refman/5.7/en/charset-database.html" target="_blank" rel="noopener">数据库的字符集</a></li><li>修改具体table编码的方法，<a href="https://dev.mysql.com/doc/refman/5.7/en/charset-unicode-upgrading.html" target="_blank" rel="noopener">charset-unicode-upgrading参考手册</a>。</li></ul><h1 id="修改MySQL的服务端配置"><a href="#修改MySQL的服务端配置" class="headerlink" title="修改MySQL的服务端配置"></a>修改MySQL的服务端配置</h1><p>修改my.cnf配置文件可以修改MySQL Server的默认字符集等设置。以配置文件在/etc/my.cnf（可能根据具体安装情况不同）为例，修改以下几项即可：</p><p><pre class="lang:default decode:true">[client]<br>default-character-set = utf8</pre></p><p>[mysql]<br>default-character-set = utf8</p><p>[mysqld]<br>init-connect = ‘SET NAMES utf8’<br>character-set-server = utf8<br>collation-server = utf8_unicode_ci<br>参考</p><ul><li>配置方法：<a href="http://stackoverflow.com/questions/3513773/change-mysql-default-character-set-to-utf-8-in-my-cnf" target="_blank" rel="noopener">http://stackoverflow.com/questions/3513773/change-mysql-default-character-set-to-utf-8-in-my-cnf</a></li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/charset-connection.html" target="_blank" rel="noopener">SET NAMES的官方解释</a><br>&nbsp;</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用MySQL的时候很可能遇到字符集编码相关的问题，尤其是涉及到数据和程序中有中文字符的时候，如果不注意，可能遇到乱码或一些其他的错误。&lt;/p&gt;
&lt;p&gt;本文详细解释MySQL相关的字符集编码设置和排序规则相关的问题。&lt;/p&gt;
&lt;h1 id=&quot;MySQL-Server的默认字符集配置&quot;&gt;&lt;a href=&quot;#MySQL-Server的默认字符集配置&quot; class=&quot;headerlink&quot; title=&quot;MySQL Server的默认字符集配置&quot;&gt;&lt;/a&gt;MySQL Server的默认字符集配置&lt;/h1&gt;&lt;p&gt;在默认安装MySQL的时候，MySQL Server使用的是英文字符集，服务端的默认配置一般是&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;character-set-server=latin1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;collation-server =latin1_swedish_ci&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;注意latin1字符集是不支持中文的。第一行的character-set当然是指字符集，第二行的collation是指对应该字符集的比较和排序规则。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/charset-server.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;charset-server参考手册&lt;/a&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://leimingshan.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="http://leimingshan.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Gradle与SonarQube的应用</title>
    <link href="http://leimingshan.github.io/2016/03/04/gradle-sonarqube/"/>
    <id>http://leimingshan.github.io/2016/03/04/gradle-sonarqube/</id>
    <published>2016-03-04T08:19:50.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先是<a href="http://docs.sonarqube.org/display/SONAR/Analyzing+with+SonarQube+Scanner+for+Gradle" target="_blank" rel="noopener">官方文档</a>。这里使用的是新的Gradle SonarQube plugin，注意与以往的Gradle Sonar和Runner插件区分，官方不推荐使用旧插件。</p><p><a href="https://plugins.gradle.org/plugin/org.sonarqube" target="_blank" rel="noopener">SonarQube插件说明</a></p><p>Github示例可以参考<a href="https://github.com/SonarSource/sonar-examples/tree/master/projects/languages/java/gradle/java-gradle-simple" target="_blank" rel="noopener">java-gradle-simple</a>，注意里面build.gradle脚本的写法，以及如何执行SonarQube的Task。</p><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先是&lt;a href=&quot;http://docs.sonarqube.org/display/SONAR/Analyzing+with+SonarQube+Scanner+for+Gradle&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;。
      
    
    </summary>
    
      <category term="Java" scheme="http://leimingshan.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://leimingshan.github.io/tags/Java/"/>
    
      <category term="Gradle" scheme="http://leimingshan.github.io/tags/Gradle/"/>
    
      <category term="SonarQube" scheme="http://leimingshan.github.io/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title>本站开始启用全站Https</title>
    <link href="http://leimingshan.github.io/2016/03/04/website-https/"/>
    <id>http://leimingshan.github.io/2016/03/04/website-https/</id>
    <published>2016-03-04T01:32:44.000Z</published>
    <updated>2018-08-28T09:08:52.702Z</updated>
    
    <content type="html"><![CDATA[<p>从今天起本Blog开始启用全站Https。<br>未来的大趋势嘛，哈哈！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从今天起本Blog开始启用全站Https。&lt;br&gt;未来的大趋势嘛，哈哈！&lt;/p&gt;

      
    
    </summary>
    
      <category term="网站" scheme="http://leimingshan.github.io/categories/%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="web" scheme="http://leimingshan.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins SonarQube的搭配使用</title>
    <link href="http://leimingshan.github.io/2016/03/04/jenkins-sonarqube/"/>
    <id>http://leimingshan.github.io/2016/03/04/jenkins-sonarqube/</id>
    <published>2016-03-04T01:20:14.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins在Ubuntu环境下的安装配置都比较简单，在安装好Java JDK之后，使用</p><p><pre class="">sudo apt-get install jenkins</pre><br>即可安装。因为没有用到后台数据库，配置过程一般就是配置端口号，以及Nginx或Apache server的代理即可。</p><p>详细方法可以参考<a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu" target="_blank" rel="noopener">官方安装指南</a>。</p><p>接下来就是与代码质量分析平台SonarQube的结合使用，前面已经说明了SonarQube的安装，然后就是利用Jenkins在进行持续集成的过程中，进行代码质量分析、代码覆盖率分析，并将相关数据和报告通知给SonarQube。</p><p>在Jenkins中的“系统管理”-“管理插件”中搜索安装SonarQube Plugin，因为我使用的是Java Gradle工程和JaCoCo测试报告，所以之前也安装了Gradle Plugin和JaCoCo Plugin，这里大家可以根据自己具体的项目选择。<a id="more"></a></p><p>在安装好SonarQube Plugin之后，记得在系统设置中配置SonarQube服务器的相关信息，可以参考下图进行。</p><p><a href="http://www.leimingshan.com/wp-content/uploads/2016/03/SonarQube-Plugin.jpg" target="_blank" rel="noopener"><img src="http://www.leimingshan.com/wp-content/uploads/2016/03/SonarQube-Plugin-300x91.jpg" alt="SonarQube Plugin"></a></p><p>另外注意配置SonarQube scanner，这里可以选择自动安装，或者选择自己安装的目录位置。</p><p><a href="http://www.leimingshan.com/wp-content/uploads/2016/03/SonarQube-Runner.jpg" target="_blank" rel="noopener"><img src="http://www.leimingshan.com/wp-content/uploads/2016/03/SonarQube-Runner-300x51.jpg" alt="SonarQube Runner"></a></p><p>服务器配置好之后，然后就是在具体的项目中配置构建过程，选择“增加构建步骤”中的Invoke Standalone SonarQube Analysis，参考下图。</p><p><a href="http://www.leimingshan.com/wp-content/uploads/2016/03/SonarQube-Analysis.jpg" target="_blank" rel="noopener"><img src="http://www.leimingshan.com/wp-content/uploads/2016/03/SonarQube-Analysis-300x131.jpg" alt="SonarQube Analysis"></a></p><p>具体的配置如下：</p><p><pre class="lang:default decode:true "># required metadata<br>sonar.projectKey=pminer:MongoDB-ImportXMLProfile<br>sonar.projectName=MongoDB-ImportXMLProfile<br>sonar.projectVersion=1.0</pre></p><h1 id="path-to-source-directories-required"><a href="#path-to-source-directories-required" class="headerlink" title="path to source directories (required)"></a>path to source directories (required)</h1><p>sonar.sources=src/main/java</p><h1 id="path-to-test-source-directories-optional"><a href="#path-to-test-source-directories-optional" class="headerlink" title="path to test source directories (optional)"></a>path to test source directories (optional)</h1><p>sonar.tests=src/test/java</p><p>sonar.java.binaries=build/classes</p><p>sonar.language=java</p><p>#Tells SonarQube where the unit tests execution reports are<br>sonar.junit.reportsPath=reports/tests</p><p>#Tells SonarQube where the unit tests code coverage report is<br>sonar.jacoco.reportPath=build/jacoco/test.exec</p><h1 id="Encoding-of-the-source-files"><a href="#Encoding-of-the-source-files" class="headerlink" title="Encoding of the source files"></a>Encoding of the source files</h1><p>sonar.sourceEncoding=UTF-8<br>注意以上的配置要根据自己具体的项目路径配置。</p><p>这样在下次的构建中，就会之前SonarQube的分析任务，并将结果发送给SonarQube服务器，然后访问服务器平台就能看到代码的质量报告。</p><p>参考：<a href="http://docs.sonarqube.org/display/PLUG/Code+Coverage+by+Unit+Tests+for+Java+Project" target="_blank" rel="noopener">http://docs.sonarqube.org/display/PLUG/Code+Coverage+by+Unit+Tests+for+Java+Project</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins在Ubuntu环境下的安装配置都比较简单，在安装好Java JDK之后，使用&lt;/p&gt;
&lt;p&gt;&lt;pre class=&quot;&quot;&gt;sudo apt-get install jenkins&lt;/pre&gt;&lt;br&gt;即可安装。因为没有用到后台数据库，配置过程一般就是配置端口号，以及Nginx或Apache server的代理即可。&lt;/p&gt;
&lt;p&gt;详细方法可以参考&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方安装指南&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;接下来就是与代码质量分析平台SonarQube的结合使用，前面已经说明了SonarQube的安装，然后就是利用Jenkins在进行持续集成的过程中，进行代码质量分析、代码覆盖率分析，并将相关数据和报告通知给SonarQube。&lt;/p&gt;
&lt;p&gt;在Jenkins中的“系统管理”-“管理插件”中搜索安装SonarQube Plugin，因为我使用的是Java Gradle工程和JaCoCo测试报告，所以之前也安装了Gradle Plugin和JaCoCo Plugin，这里大家可以根据自己具体的项目选择。
    
    </summary>
    
      <category term="Java" scheme="http://leimingshan.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://leimingshan.github.io/tags/Java/"/>
    
      <category term="SonarQube" scheme="http://leimingshan.github.io/tags/SonarQube/"/>
    
      <category term="Jenkins" scheme="http://leimingshan.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>SonarQube-代码质量管理平台的安装</title>
    <link href="http://leimingshan.github.io/2016/02/25/sonarqube-install/"/>
    <id>http://leimingshan.github.io/2016/02/25/sonarqube-install/</id>
    <published>2016-02-25T05:49:30.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>JDK，数据库（以下以MySQL为例），操作系统支持Linux和Windows（文章以Linux Ubuntu 14.04为例）。</p><h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><p>终端进入mysql-client：</p><pre class="lang:default decode:true ">mysql -u root -p</pre>执行以下SQL语句建立数据库和相关用户：<pre class="lang:default decode:true">CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci;CREATE USER 'sonar' IDENTIFIED BY 'sonar';GRANT ALL ON sonar.* TO 'sonar'@'%' IDENTIFIED BY 'sonar';GRANT ALL ON sonar.* TO 'sonar'@'localhost' IDENTIFIED BY 'sonar';FLUSH PRIVILEGES;</pre><a id="more"></a>## 下载并解压SonarQube安装包在[SonarQube官网](http://www.sonarqube.org/downloads/)获取最新的下载地址。<pre class="lang:default decode:true ">wget https://sonarsource.bintray.com/Distribution/sonarqube/sonarqube-5.3.zipunzip sonarqube-5.3.zipsudo mv sonarqube-5.3 /usr/local/sonar</pre><h2 id="编辑配置文件sonar-properties"><a href="#编辑配置文件sonar-properties" class="headerlink" title="编辑配置文件sonar.properties"></a>编辑配置文件sonar.properties</h2><p>编辑conf目录下的sonar.properties，主要修改数据库配置和web server配置，取消相应行的注释并编辑为对应的值。</p><pre class="lang:default decode:true ">sonar.jdbc.username=sonarsonar.jdbc.password=sonarsonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance</pre>以下的web server配置允许以下地址访问 http://127.0.0.1:9000/sonar<pre class="lang:default decode:true ">sonar.web.host=127.0.0.1 #默认是0.0.0.0，绑定本机所有ip地址sonar.web.context=/sonar #默认是空sonar.web.port=9000</pre><h2 id="配置Service运行"><a href="#配置Service运行" class="headerlink" title="配置Service运行"></a>配置Service运行</h2><p>参考<a href="http://docs.sonarqube.org/display/SONAR/Running+SonarQube+as+a+Service+on+Linux" target="_blank" rel="noopener">官方文档</a></p><p>新建/etc/init.d/sonar文件并编辑如下。</p><p><pre class="lang:default decode:true ">#!/bin/sh<br>#</pre></p><h1 id="rc-file-for-SonarQube"><a href="#rc-file-for-SonarQube" class="headerlink" title="rc file for SonarQube"></a>rc file for SonarQube</h1><p>#</p><h1 id="chkconfig-345-96-10"><a href="#chkconfig-345-96-10" class="headerlink" title="chkconfig: 345 96 10"></a>chkconfig: 345 96 10</h1><h1 id="description-SonarQube-system-www-sonarsource-org"><a href="#description-SonarQube-system-www-sonarsource-org" class="headerlink" title="description: SonarQube system (www.sonarsource.org)"></a>description: SonarQube system (www.sonarsource.org)</h1><p>#</p><h3 id="BEGIN-INIT-INFO"><a href="#BEGIN-INIT-INFO" class="headerlink" title="BEGIN INIT INFO"></a>BEGIN INIT INFO</h3><h1 id="Provides-sonar"><a href="#Provides-sonar" class="headerlink" title="Provides: sonar"></a>Provides: sonar</h1><h1 id="Required-Start-network"><a href="#Required-Start-network" class="headerlink" title="Required-Start: $network"></a>Required-Start: $network</h1><h1 id="Required-Stop-network"><a href="#Required-Stop-network" class="headerlink" title="Required-Stop: $network"></a>Required-Stop: $network</h1><h1 id="Default-Start-3-4-5"><a href="#Default-Start-3-4-5" class="headerlink" title="Default-Start: 3 4 5"></a>Default-Start: 3 4 5</h1><h1 id="Default-Stop-0-1-2-6"><a href="#Default-Stop-0-1-2-6" class="headerlink" title="Default-Stop: 0 1 2 6"></a>Default-Stop: 0 1 2 6</h1><h1 id="Short-Description-SonarQube-system-www-sonarsource-org"><a href="#Short-Description-SonarQube-system-www-sonarsource-org" class="headerlink" title="Short-Description: SonarQube system (www.sonarsource.org)"></a>Short-Description: SonarQube system (www.sonarsource.org)</h1><h1 id="Description-SonarQube-system-www-sonarsource-org"><a href="#Description-SonarQube-system-www-sonarsource-org" class="headerlink" title="Description: SonarQube system (www.sonarsource.org)"></a>Description: SonarQube system (www.sonarsource.org)</h1><h3 id="END-INIT-INFO"><a href="#END-INIT-INFO" class="headerlink" title="END INIT INFO"></a>END INIT INFO</h3><p>/usr/bin/sonar $*<br>运行以下命令安装服务并运行，注意bin子目录的32位64位区别。</p><p><pre class="lang:default decode:true">sudo ln -s $SONAR_HOME/bin/linux-x86-64/sonar.sh /usr/bin/sonar<br>sudo chmod 755 /etc/init.d/sonar<br>sudo update-rc.d sonar defaults<br>sudo service sonar start</pre><br>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h2&gt;&lt;p&gt;JDK，数据库（以下以MySQL为例），操作系统支持Linux和Windows（文章以Linux Ubuntu 14.04为例）。&lt;/p&gt;
&lt;h2 id=&quot;数据库配置&quot;&gt;&lt;a href=&quot;#数据库配置&quot; class=&quot;headerlink&quot; title=&quot;数据库配置&quot;&gt;&lt;/a&gt;数据库配置&lt;/h2&gt;&lt;p&gt;终端进入mysql-client：&lt;/p&gt;
&lt;pre class=&quot;lang:default decode:true &quot;&gt;mysql -u root -p&lt;/pre&gt;
执行以下SQL语句建立数据库和相关用户：
&lt;pre class=&quot;lang:default decode:true&quot;&gt;CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci;
CREATE USER &#39;sonar&#39; IDENTIFIED BY &#39;sonar&#39;;
GRANT ALL ON sonar.* TO &#39;sonar&#39;@&#39;%&#39; IDENTIFIED BY &#39;sonar&#39;;
GRANT ALL ON sonar.* TO &#39;sonar&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;sonar&#39;;
FLUSH PRIVILEGES;&lt;/pre&gt;
    
    </summary>
    
      <category term="开发" scheme="http://leimingshan.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://leimingshan.github.io/tags/Java/"/>
    
      <category term="SonarQube" scheme="http://leimingshan.github.io/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu14.04使用ppa源安装PHP-7</title>
    <link href="http://leimingshan.github.io/2016/02/05/ubuntu-ppa-install-php7/"/>
    <id>http://leimingshan.github.io/2016/02/05/ubuntu-ppa-install-php7/</id>
    <published>2016-02-05T06:03:12.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Ubuntu 14.04下安装PHP除了可以直接从官网下载源码编译安装，也可以PPA源安装。如果读者对编译安装的各种选项和配置方法不是很熟悉的话，则推荐使用这种方法快速安装。</p><p>在安装的时候，这里选择的是比较流行的一位个人作者维护的一个PPA源，具体的使用方法如下：</p><ol><li><p>添加源。</p><pre class="lang:default decode:true">sudo LC_ALL=en_US.UTF-8 add-apt-repository ppa:ondrej/php</pre></li><li><p>如果有之前使用apt-get方法安装的PHP，先删除后再安装PHP7。</p><pre class="lang:default decode:true">sudo apt-get updatesudo apt-get purge php5-common -ysudo apt-get install php7.0 php7.0-fpm php7.0-mysql -ysudo apt-get --purge autoremove -y</pre></li><li><p>如果使用nginx，注意以下配置和相应的用户权限。</p><pre class="lang:default decode:true ">fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;</pre></li></ol><p>参考：</p><ul><li><a href="https://www.digitalocean.com/community/tutorials/how-to-upgrade-to-php-7-on-ubuntu-14-04" target="_blank" rel="noopener">How To Upgrade to PHP 7 on Ubuntu 14.04</a></li><li><a href="http://askubuntu.com/questions/705880/how-to-install-php-7" target="_blank" rel="noopener">How to install PHP 7?</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Ubuntu 14.04下安装PHP除了可以直接从官网下载源码编译安装，也可以PPA源安装。如果读者对编译安装的各种选项和配置方法不是很熟悉的话，则推荐使用这种方法快速安装。&lt;/p&gt;
&lt;p&gt;在安装的时候，这里选择的是比较流行的一位个人作者维护的一个PPA源，具体的使用方法
      
    
    </summary>
    
      <category term="Linux" scheme="http://leimingshan.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://leimingshan.github.io/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://leimingshan.github.io/tags/Ubuntu/"/>
    
      <category term="PHP" scheme="http://leimingshan.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB--mongoimport loses connection when importing big files</title>
    <link href="http://leimingshan.github.io/2016/01/20/mongoimport-loses-connection-when-importing-big-files/"/>
    <id>http://leimingshan.github.io/2016/01/20/mongoimport-loses-connection-when-importing-big-files/</id>
    <published>2016-01-20T06:36:20.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在新版本下进行MongoDB数据导入的时候，遇到了这样一个问题，例如使用如下命令：</p><p><pre class="lang:default decode:true">mongoimport -d test -c profile users.dat</pre><br>在之前使用过几次这样的导入方法都没有问题，但这次却提示：</p><p><pre class="lang:default decode:true">2016-01-20T10:05:25.228+0100    connected to: localhost<br>2016-01-20T10:05:25.735+0100    error inserting documents: lost connection to server<br>2016-01-20T10:05:25.735+0100    Failed: lost connection to server<br>2016-01-20T10:05:25.735+0100    imported 0 documents</pre><br>查看MongoDB的Log，发现出现异常的原因，如下：</p><p><pre class="lang:default decode:true ">2016-01-20T11:26:39.103+0800 I -        [conn17] Assertion: 10334:BSONObj size: 33562755 (0x2002083) is invalid. Size must be between 0 and 16793600(16MB) First element: insert: “Profile”</pre><br>搜索解决方案，发现这是mongo工具包在新版本下的小bug，mongorestore和mongoimport都有一样的问题，官方说明可以参考<a href="https://jira.mongodb.org/browse/TOOLS-939" target="_blank" rel="noopener">https://jira.mongodb.org/browse/TOOLS-939</a>。</p><p>原因就是bulk write api，原来的api中批量写入的batch size最大是32MB，现在已经变为16MB了。在导入或还原数据的时候，指定选项 –batchSize=1000，指定一个较小的值即可，默认是10000。</p><p>参考：</p><ol><li><a href="http://stackoverflow.com/questions/33475505/mongodb-mongoimport-loses-connection-when-importing-big-files" target="_blank" rel="noopener">http://stackoverflow.com/questions/33475505/mongodb-mongoimport-loses-connection-when-importing-big-files</a></li><li><a href="https://jira.mongodb.org/browse/TOOLS-939" target="_blank" rel="noopener">https://jira.mongodb.org/browse/TOOLS-939</a></li><li><a href="http://chenzhou123520.iteye.com/blog/1641319" target="_blank" rel="noopener">http://chenzhou123520.iteye.com/blog/1641319</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在新版本下进行MongoDB数据导入的时候，遇到了这样一个问题，例如使用如下命令：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&quot;lang:default decode:true&quot;&gt;mongoimport -d test -c profile users.dat&lt;/pre&gt;&lt;b
      
    
    </summary>
    
      <category term="数据库" scheme="http://leimingshan.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="NoSQL" scheme="http://leimingshan.github.io/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu, Debian中iptables规则保存和重启自动加载</title>
    <link href="http://leimingshan.github.io/2016/01/13/debian-iptables-save/"/>
    <id>http://leimingshan.github.io/2016/01/13/debian-iptables-save/</id>
    <published>2016-01-13T14:01:31.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Debian中iptables命令输完之后会立刻生效，但重启之后配置就会消失，Debian提供了一个iptables-save程序快速保存配置。</p><p>通过iptables-save和iptables-restore可以让debian自动保存并在开机时自动加载iptables规则。</p><h3 id="1、将iptables配置保存到-etc-iptables，这个文件名可以自己定义，与下面的配置一致即可"><a href="#1、将iptables配置保存到-etc-iptables，这个文件名可以自己定义，与下面的配置一致即可" class="headerlink" title="1、将iptables配置保存到/etc/iptables，这个文件名可以自己定义，与下面的配置一致即可"></a>1、将iptables配置保存到/etc/iptables，这个文件名可以自己定义，与下面的配置一致即可</h3><pre class="lang:default decode:true">iptables-save &gt; /etc/iptables</pre><h3 id="2、创建并编辑自启动配置文件，内容为启动网络时恢复iptables配置"><a href="#2、创建并编辑自启动配置文件，内容为启动网络时恢复iptables配置" class="headerlink" title="2、创建并编辑自启动配置文件，内容为启动网络时恢复iptables配置"></a>2、创建并编辑自启动配置文件，内容为启动网络时恢复iptables配置</h3><p><pre class="lang:default decode:true">sudo vim /etc/network/if-pre-up.d/iptables</pre><br>文件内容为：</p><p><pre class="lang:default decode:true ">#!/bin/sh<br>/sbin/iptables-restore &lt; /etc/iptables</pre><br>保存并退出。</p><p>之后系统每次启动时iptables就可以自动加载规则了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Debian中iptables命令输完之后会立刻生效，但重启之后配置就会消失，Debian提供了一个iptables-save程序快速保存配置。&lt;/p&gt;
&lt;p&gt;通过iptables-save和iptables-restore可以让debian自动保存并在开机时自动加载ip
      
    
    </summary>
    
      <category term="Linux" scheme="http://leimingshan.github.io/categories/Linux/"/>
    
    
      <category term="Ubuntu" scheme="http://leimingshan.github.io/tags/Ubuntu/"/>
    
      <category term="Debian" scheme="http://leimingshan.github.io/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ相关产品注册</title>
    <link href="http://leimingshan.github.io/2016/01/04/intellij-products-register/"/>
    <id>http://leimingshan.github.io/2016/01/04/intellij-products-register/</id>
    <published>2016-01-04T08:06:11.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>需要的同学可以查看以下网址。当然还是推荐大家去官网购买使用。</p><p><a href="http://idea.lanyus.com/" target="_blank" rel="noopener">http://idea.lanyus.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;需要的同学可以查看以下网址。当然还是推荐大家去官网购买使用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://idea.lanyus.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://idea.lanyus.com/&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="开发" scheme="http://leimingshan.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="develop" scheme="http://leimingshan.github.io/tags/develop/"/>
    
  </entry>
  
  <entry>
    <title>MySQL FIND_IN_SET Usage</title>
    <link href="http://leimingshan.github.io/2016/01/04/mysql-find-in-set-usage/"/>
    <id>http://leimingshan.github.io/2016/01/04/mysql-find-in-set-usage/</id>
    <published>2016-01-04T08:04:59.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL手册中FIND_IN_SET函数的语法:</p><p>FIND_IN_SET(str, strlist)</p><p>Returns a value in the range of 1 to <em><code>N</code></em> if the string <em><code>str</code></em> is in the string list <em><code>strlist</code></em> consisting of <em><code>N</code></em> substrings. A string list is a string composed of substrings separated by <span class="quote">“<span class="quote"><code>,</code></span>”</span> characters. If the first argument is a constant string and the second is a column of type <a href="http://dev.mysql.com/doc/refman/5.7/en/set.html" title="11.4.5 The SET Type" target="_blank" rel="noopener"><code>SET</code></a>, the <a href="http://dev.mysql.com/doc/refman/5.7/en/string-functions.html#function_find-in-set" target="_blank" rel="noopener"><code>FIND_IN_SET()</code></a> function is optimized to use bit arithmetic. Returns <code>0</code> if <em><code>str</code></em> is not in <em><code>strlist</code></em> or if <em><code>strlist</code></em> is the empty string. Returns <code>NULL</code> if either argument is <code>NULL</code>. This function does not work properly if the first argument contains a comma (<span class="quote">“<span class="quote"><code>,</code></span>”</span>) character.</p><p>假如字符串str 在由N 子链组成的字符串列表strlist 中，则返回值的范围在 1 到 N 之间。<br>一个字符串列表就是一个由一些被‘,’符号分开的子链组成的字符串。如果第一个参数是一个常数字符串，而第二个是type SET列，则   FIND_IN_SET() 函数被优化，使用比特计算。<br>如果str不在strlist 或strlist 为空字符串，则返回值为 0 。如任意一个参数为NULL，则返回值为 NULL。这个函数在第一个参数包含一个逗号(‘,’)时将无法正常运行。<a id="more"></a></p><p>例如：</p><p><pre class="lang:default decode:true ">mysql&gt; SELECT FIND_IN_SET(‘b’,’a,b,c,d’);<br>        -&gt; 2</pre><br><a href="http://dev.mysql.com/doc/refman/5.7/en/string-functions.html#function_substring-index" target="_blank" rel="noopener"><code>SUBSTRING_INDEX(_&lt;code&gt;str</code><em>,</em><code>delim</code><em>,</em><code>count</code>_)</a></p><p>Returns the substring from string <em><code>str</code></em> before <em><code>count</code></em> occurrences of the delimiter <em><code>delim</code></em>. If <em><code>count</code></em> is positive, everything to the left of the final delimiter (counting from the left) is returned. If <em><code>count</code></em> is negative, everything to the right of the final delimiter (counting from the right) is returned. <a href="http://dev.mysql.com/doc/refman/5.7/en/string-functions.html#function_substring-index" target="_blank" rel="noopener"><code>SUBSTRING_INDEX()</code></a> performs a case-sensitive match when searching for <em><code>delim</code></em>.</p><p><pre class="lang:default decode:true ">mysql&gt; SELECT SUBSTRING_INDEX(‘www.mysql.com’, ‘.’, 2);<br>        -&gt; ‘www.mysql’<br>mysql&gt; SELECT SUBSTRING_INDEX(‘www.mysql.com’, ‘.’, -2);<br>        -&gt; ‘mysql.com’</pre><br>This function is multibyte safe.</p><p>&nbsp;</p><p>MySQL中使用WHERE IN进行条件查询的时候，一般情况下，查询的结果和IN中值的顺序并不一致。</p><p>有两种方式可以对IN查询的结果进行排序。一种是ORDER BY FIND_IN_SET，另外一种是ORDER BY SUBSTRING_INDEX。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL手册中FIND_IN_SET函数的语法:&lt;/p&gt;
&lt;p&gt;FIND_IN_SET(str, strlist)&lt;/p&gt;
&lt;p&gt;Returns a value in the range of 1 to &lt;em&gt;&lt;code&gt;N&lt;/code&gt;&lt;/em&gt; if the string &lt;em&gt;&lt;code&gt;str&lt;/code&gt;&lt;/em&gt; is in the string list &lt;em&gt;&lt;code&gt;strlist&lt;/code&gt;&lt;/em&gt; consisting of &lt;em&gt;&lt;code&gt;N&lt;/code&gt;&lt;/em&gt; substrings. A string list is a string composed of substrings separated by &lt;span class=&quot;quote&quot;&gt;“&lt;span class=&quot;quote&quot;&gt;&lt;code&gt;,&lt;/code&gt;&lt;/span&gt;”&lt;/span&gt; characters. If the first argument is a constant string and the second is a column of type &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/set.html&quot; title=&quot;11.4.5 The SET Type&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;SET&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/string-functions.html#function_find-in-set&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;FIND_IN_SET()&lt;/code&gt;&lt;/a&gt; function is optimized to use bit arithmetic. Returns &lt;code&gt;0&lt;/code&gt; if &lt;em&gt;&lt;code&gt;str&lt;/code&gt;&lt;/em&gt; is not in &lt;em&gt;&lt;code&gt;strlist&lt;/code&gt;&lt;/em&gt; or if &lt;em&gt;&lt;code&gt;strlist&lt;/code&gt;&lt;/em&gt; is the empty string. Returns &lt;code&gt;NULL&lt;/code&gt; if either argument is &lt;code&gt;NULL&lt;/code&gt;. This function does not work properly if the first argument contains a comma (&lt;span class=&quot;quote&quot;&gt;“&lt;span class=&quot;quote&quot;&gt;&lt;code&gt;,&lt;/code&gt;&lt;/span&gt;”&lt;/span&gt;) character.&lt;/p&gt;
&lt;p&gt;假如字符串str 在由N 子链组成的字符串列表strlist 中，则返回值的范围在 1 到 N 之间。&lt;br&gt;一个字符串列表就是一个由一些被‘,’符号分开的子链组成的字符串。如果第一个参数是一个常数字符串，而第二个是type SET列，则   FIND_IN_SET() 函数被优化，使用比特计算。&lt;br&gt;如果str不在strlist 或strlist 为空字符串，则返回值为 0 。如任意一个参数为NULL，则返回值为 NULL。这个函数在第一个参数包含一个逗号(‘,’)时将无法正常运行。
    
    </summary>
    
      <category term="数据库" scheme="http://leimingshan.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="http://leimingshan.github.io/tags/MySQL/"/>
    
  </entry>
  
</feed>
