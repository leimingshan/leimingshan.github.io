<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mingshan Lei&#39;s Blog</title>
  <subtitle>Tech Share</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://leimingshan.github.io/"/>
  <updated>2018-08-27T06:15:38.057Z</updated>
  <id>http://leimingshan.github.io/</id>
  
  <author>
    <name>Mingshan Lei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Elasticsearch-nested-query</title>
    <link href="http://leimingshan.github.io/2018/08/27/Elasticsearch-nested-query/"/>
    <id>http://leimingshan.github.io/2018/08/27/Elasticsearch-nested-query/</id>
    <published>2018-08-27T05:23:35.000Z</published>
    <updated>2018-08-27T06:15:38.057Z</updated>
    
    <content type="html"><![CDATA[<p>Elasticsearch嵌套查询，具体可参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-nested-query.html" target="_blank" rel="external">Nested Query</a>.</p>
<p>建议还是要多看多熟悉Elasticsearch的官方文档，比到处去搜强多了。</p>
<p>简而言之，在对ES doc的多层嵌套对象进行查询的时候，要使用Nested Query，常规查询无效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;query&quot;: &#123;</div><div class="line">        &quot;nested&quot; : &#123;</div><div class="line">            &quot;path&quot; : &quot;obj&quot;,</div><div class="line">            &quot;query&quot; : &#123;</div><div class="line">                &quot;bool&quot; : &#123;</div><div class="line">                    &quot;must&quot; : [</div><div class="line">                        &#123; &quot;match&quot; : &#123;&quot;obj.info.name&quot; : &quot;zhangsan&quot;&#125; &#125;</div><div class="line">                    ]</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Elasticsearch嵌套查询，具体可参考&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-nested-query.html&quot; target=&quot;_bla
    
    </summary>
    
    
      <category term="elasticsearch" scheme="http://leimingshan.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>RBAC简要设计</title>
    <link href="http://leimingshan.github.io/2018/06/07/RBAC-system-design/"/>
    <id>http://leimingshan.github.io/2018/06/07/RBAC-system-design/</id>
    <published>2018-06-07T05:49:24.000Z</published>
    <updated>2018-08-28T08:58:39.113Z</updated>
    
    <content type="html"><![CDATA[<p>Role-Based-Access-Control System Design.<br>比较常见的基于角色的访问控制系统，这次是主要了解和简单设计，不涉及到特别复杂的功能。</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>参考文档：<a href="https://blog.csdn.net/yangwenxue_admin/article/details/73936803" target="_blank" rel="external">https://blog.csdn.net/yangwenxue_admin/article/details/73936803</a></p>
<p>RBAC（Role-Based Access Control，基于角色的访问控制），就是用户<strong>通过角色与权限进行关联</strong>。</p>
<p>其主要特点如下：</p>
<p>一个用户拥有若干角色，每一个角色拥有若干权限。这样，就构造成“用户-角色-权限”的授权模型。<br>这种模型中，用户与角色之间，角色与权限之间，一般是多对多的关系。<br>在此基础上，可以扩展出用户组等实体类型。<br>根据实际需求，可以考虑增加用户组，并对具体权限的类型进行了细分。<br><a id="more"></a></p>
<h1 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h1><p>角色是什么？可以理解为一定数量的权限的集合，权限的载体。例如：一个论坛系统，“超级管理员”、“版主”都是角色。版主可管理版内的帖子、可管理版内的用户等，这些是权限。要给某个用户授予这些权限，不需要直接将权限授予用户，可将“版主”这个角色赋予该用户。  </p>
<h1 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h1><p>当用户的数量非常大时，要给系统每个用户逐一授权（授角色），是件非常烦琐的事情。这时，就需要给用户分组，每个用户组内有多个用户。</p>
<p>除了可给用户授权外，还可以给用户组授权。这样一来，用户拥有的所有权限，就是用户个人拥有的权限与该用户所在用户组拥有的权限之和。</p>
<h1 id="权限类型"><a href="#权限类型" class="headerlink" title="权限类型"></a>权限类型</h1><p>权限细分出“权限类型”，我们根据它的取值来区分是哪一类权限，进而与特定的表进行关联。如“MENU”表示菜单的访问权限、“RESOURCE”表示可供访问的URL、“FILE”表示文件的修改权限等。 </p>
<p>这样设计的好处有二：</p>
<ul>
<li>不需要区分哪些是权限操作，哪些是资源，（实际上，有时候也不好区分，如菜单，把它理解为资源呢还是功能模块权限呢？）。</li>
<li>方便扩展，当系统要对新的内容或实体进行权限控制时，我只需要建立一个新的关联表“权限XX关联表”，并确定这类权限的权限类型字符串。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Role-Based-Access-Control System Design.&lt;br&gt;比较常见的基于角色的访问控制系统，这次是主要了解和简单设计，不涉及到特别复杂的功能。&lt;/p&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;参考文档：&lt;a href=&quot;https://blog.csdn.net/yangwenxue_admin/article/details/73936803&quot;&gt;https://blog.csdn.net/yangwenxue_admin/article/details/73936803&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RBAC（Role-Based Access Control，基于角色的访问控制），就是用户&lt;strong&gt;通过角色与权限进行关联&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;其主要特点如下：&lt;/p&gt;
&lt;p&gt;一个用户拥有若干角色，每一个角色拥有若干权限。这样，就构造成“用户-角色-权限”的授权模型。&lt;br&gt;这种模型中，用户与角色之间，角色与权限之间，一般是多对多的关系。&lt;br&gt;在此基础上，可以扩展出用户组等实体类型。&lt;br&gt;根据实际需求，可以考虑增加用户组，并对具体权限的类型进行了细分。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://leimingshan.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://leimingshan.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Docker-Basic</title>
    <link href="http://leimingshan.github.io/2018/01/25/Docker-Basic/"/>
    <id>http://leimingshan.github.io/2018/01/25/Docker-Basic/</id>
    <published>2018-01-25T07:45:10.000Z</published>
    <updated>2018-08-28T09:10:51.135Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于生产环境的上线部署，都依赖于镜像构建、制作、部署上线运行等操作，作为一名合格的RD，当然不能只局限于在上线平台上进行一顿鼠标操作了，一定要弄懂这些基础设施内部到底在干嘛。因此，对Docker的相关学习也是很有必要的。</p>
<h1 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h1><p><a href="http://dockone.io/article/783" target="_blank" rel="external">http://dockone.io/article/783</a></p>
<p><a href="http://merrigrove.blogspot.com/2015/10/visualizing-docker-containers-and-images.html" target="_blank" rel="external">http://merrigrove.blogspot.com/2015/10/visualizing-docker-containers-and-images.html</a></p>
<p>两篇文章分别是中文和英文原版，建议初学者多读几遍，收获非常大。<br>尤其是对镜像只读层和读写层的理解，非常重要，还有docker各个命令对各层的影响。<br><a id="more"></a></p>
<h1 id="Docker-run"><a href="#Docker-run" class="headerlink" title="Docker run"></a>Docker run</h1><p><a href="https://docs.docker.com/engine/reference/commandline/run/" target="_blank" rel="external">https://docs.docker.com/engine/reference/commandline/run/</a></p>
<p>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p>
<p>常用选项：</p>
<ul>
<li>–detach , -d        Run container in background and print container ID</li>
<li>–tty , -t        Allocate a pseudo-TTY</li>
<li>–interactive , -i        Keep STDIN open even if not attached</li>
<li>–publish , -p        Publish a container’s port(s) to the host</li>
<li>–volume , -v        Bind mount a volume</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// sshd -D 将 sshd 作为前台进程运行，而不是脱离控制台成为后台守护进程。主要用于调试。</div><div class="line">// -it 通常一起使用，可以开启一个终端进去交互模式，调试时很有用。</div><div class="line">docker run -d -p 2222:22 tomcat:centos /usr/sbin/sshd -D</div><div class="line"></div><div class="line">docker run -ti -v ~/Downloads:/Downloads tomcat:centos /bin/bash</div><div class="line"></div><div class="line">docker run -d -p 8000:8080 -p 1098:1099 tomcat:centos /usr/local/sbin/tomcat.sh</div><div class="line"></div><div class="line">docker run -it -p 8000:8080 -p 1098:1099 tomcat:centos /usr/local/sbin/tomcat.sh</div></pre></td></tr></table></figure>
<h1 id="其他Docker命令"><a href="#其他Docker命令" class="headerlink" title="其他Docker命令"></a>其他Docker命令</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ul>
<li>docker version</li>
<li>docker info</li>
<li>docker stop $(docker ps -aq)</li>
<li>docker rm $(docker ps -aq)</li>
<li>docker pull</li>
<li>docker login</li>
<li>docerk rmi</li>
<li>docker images</li>
</ul>
<h2 id="镜像类"><a href="#镜像类" class="headerlink" title="镜像类"></a>镜像类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 检索image</div><div class="line">$docker search image_name</div><div class="line"></div><div class="line"># 下载image</div><div class="line">$docker pull image_name</div><div class="line"></div><div class="line"># 列出镜像列表; -a, --all=false Show all images; --no-trunc=false Don&apos;t truncate output; -q, --quiet=false Only show numeric IDs</div><div class="line">$docker images</div><div class="line"></div><div class="line"># 删除一个或者多个镜像; -f, --force=false Force; --no-prune=false Do not delete untagged parents</div><div class="line">$docker rmi image_name</div><div class="line"></div><div class="line"># 显示一个镜像的历史; --no-trunc=false Don&apos;t truncate output; -q, --quiet=false Only show numeric IDs</div><div class="line">$docker history image_name</div></pre></td></tr></table></figure>
<h2 id="容器类"><a href="#容器类" class="headerlink" title="容器类"></a>容器类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"># 列出当前所有正在运行的container</div><div class="line">$docker ps</div><div class="line"># 列出所有的container</div><div class="line">$docker ps -a</div><div class="line"># 列出最近一次启动的container</div><div class="line">$docker ps -l</div><div class="line"></div><div class="line"># 保存对容器的修改; -a, --author=&quot;&quot; Author; -m, --message=&quot;&quot; Commit message  </div><div class="line">$docker commit ID new_image_name</div><div class="line"></div><div class="line"># 删除所有容器</div><div class="line">$docker rm `docker ps -a -q`</div><div class="line">  </div><div class="line"># 删除单个容器; -f, --force=false; -l, --link=false Remove the specified link and not the underlying container; -v, --volumes=false Remove the volumes associated to the container</div><div class="line">$docker rm Name/ID</div><div class="line"></div><div class="line"># 停止、启动、杀死一个容器</div><div class="line">$docker stop Name/ID</div><div class="line">$docker start Name/ID</div><div class="line">$docker kill Name/ID</div><div class="line"></div><div class="line"># 从一个容器中取日志; -f, --follow=false Follow log output; -t, --timestamps=false Show timestamps</div><div class="line">$docker logs Name/ID</div><div class="line">  </div><div class="line"># 列出一个容器里面被改变的文件或者目录，list列表会显示出三种事件，A 增加的，D 删除的，C 被改变的</div><div class="line">$docker diff Name/ID</div><div class="line">  </div><div class="line"># 显示一个运行的容器里面的进程信息</div><div class="line">$docker top Name/ID</div><div class="line"></div><div class="line"># 从容器里面拷贝文件/目录到本地一个路径  </div><div class="line">$docker cp Name:/container_path to_path</div><div class="line">$docker cp ID:/container_path to_path</div><div class="line"></div><div class="line"># 重启一个正在运行的容器; -t, --time=10 Number of seconds to try to stop for before killing the container, Default=10</div><div class="line">$docker restart Name/ID</div><div class="line"></div><div class="line"># 附加到一个运行的容器上面; --no-stdin=false Do not attach stdin; --sig-proxy=true Proxify all received signal to the process  </div><div class="line">$docker attach ID</div></pre></td></tr></table></figure>
<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><p>to be continued</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鉴于生产环境的上线部署，都依赖于镜像构建、制作、部署上线运行等操作，作为一名合格的RD，当然不能只局限于在上线平台上进行一顿鼠标操作了，一定要弄懂这些基础设施内部到底在干嘛。因此，对Docker的相关学习也是很有必要的。&lt;/p&gt;
&lt;h1 id=&quot;基础信息&quot;&gt;&lt;a href=&quot;#基础信息&quot; class=&quot;headerlink&quot; title=&quot;基础信息&quot;&gt;&lt;/a&gt;基础信息&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://dockone.io/article/783&quot;&gt;http://dockone.io/article/783&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://merrigrove.blogspot.com/2015/10/visualizing-docker-containers-and-images.html&quot;&gt;http://merrigrove.blogspot.com/2015/10/visualizing-docker-containers-and-images.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;两篇文章分别是中文和英文原版，建议初学者多读几遍，收获非常大。&lt;br&gt;尤其是对镜像只读层和读写层的理解，非常重要，还有docker各个命令对各层的影响。&lt;br&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://leimingshan.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Basic Usage</title>
    <link href="http://leimingshan.github.io/2016/05/18/Hexo-Basic/"/>
    <id>http://leimingshan.github.io/2016/05/18/Hexo-Basic/</id>
    <published>2016-05-18T06:26:50.000Z</published>
    <updated>2018-08-27T03:44:42.400Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a><br><a id="more"></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>工作一年的技术成长总结</title>
    <link href="http://leimingshan.github.io/2016/04/20/tech-growup-record/"/>
    <id>http://leimingshan.github.io/2016/04/20/tech-growup-record/</id>
    <published>2016-04-20T07:25:21.000Z</published>
    <updated>2018-08-28T07:29:15.195Z</updated>
    
    <content type="html"><![CDATA[<p>工作一年多以来，学了不少东西，也尝试了许多新东西，也成长了不少，也许只是一个粗略的记录，也希望提醒自己，还是取得了一些成绩吧，但不能骄傲，还有许多不足之处，技术永无止境，还需要更多的努力。</p>
<p>工作初始，接触的是C语言网络编程和后台编程的项目，承担的是整体系统中的一部分，加上之前对Redis的了解，也比较适合在这里使用，在设计的时候也就用上了。因为的自己负责调研的部分，所以许多都可以自己设计，还是很高兴的，在使用Redis的过程中，也简单分析了Redis的代码，以及在Linux下编程的技巧，包括学习Redis的Makefile，对错误和消息的处理等。使用Redis作为缓存队列，也实现了自己想要的效果，当然这里会有更优的解决方案，但是作为自己在项目中的第一个设计，还是基本满意的。</p>
<p>再后来的项目，大部分的经历就转到Java语言项目和Java Web方面了，也接触了一些项目的框架，修改功能代码等。独当一面的是另外一个基于大数据的演示性项目，将来会把这个搭建在服务器上。这个项目里，我独立完成了项目的Java Web后台设计，使用了包括Spring，Struts，MongoDB，Morphia等技术，独立设计前台HTML和JS等，使用了Bootstrap，Echarts，JQuery，Semantic-ui等。项目的时间比较久，后来还有一些改进方案没来得及实施，但是从我的角度来说，是我的一个大作品。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作一年多以来，学了不少东西，也尝试了许多新东西，也成长了不少，也许只是一个粗略的记录，也希望提醒自己，还是取得了一些成绩吧，但不能骄傲，还有许多不足之处，技术永无止境，还需要更多的努力。&lt;/p&gt;
&lt;p&gt;工作初始，接触的是C语言网络编程和后台编程的项目，承担的是整体系统中的
    
    </summary>
    
      <category term="Diary" scheme="http://leimingshan.github.io/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>Gradle使用代理服务器</title>
    <link href="http://leimingshan.github.io/2016/03/23/gradle/"/>
    <id>http://leimingshan.github.io/2016/03/23/gradle/</id>
    <published>2016-03-23T01:03:16.000Z</published>
    <updated>2018-08-28T08:57:19.979Z</updated>
    
    <content type="html"><![CDATA[<p>在国内使用Gradle的时候，由于依赖管理时经常需要从mavenCentral（maven中央仓库）和jCenter中下载lib，速度不稳定，有时还会导致build长时间卡住，有一种方法是使用Gradle的Offline模式，但前提是你已经cache了项目的依赖在本地，不然可能会Build失败，另外就是使用代理服务器，也是一种不错的选择。</p>
<p><strong>在Gradle中使用代理服务器的方法：</strong></p>
<ol>
<li><strong>使用以下命令行参数指定代理服务器。</strong><br><pre class="lang:default decode:true">gradle -Dhttp.proxyHost=yourProxy -Dhttp.proxyPort=yourPort -Dhttp.proxyUser=usernameProxy -Dhttp.proxyPassword=yourPassoword</pre><a id="more"></a></li>
<li><strong>修改Gradle用户配置文件。</strong>可以在GRADLE_USER_HOME下新建文件gradle.properties，然后设置代理。GRADLE_USER_HOME的路径一般如下:<br>/home/&lt;username&gt;/.gradle/ (Linux)<br>/Users/&lt;username&gt;/.gradle/ (Mac)<br>C:\Users\&lt;username&gt;.gradle\ (Windows)<br><pre class="lang:default decode:true "># Http Proxy<br>systemProp.http.proxyHost=www.somehost.org<br>systemProp.http.proxyPort=8080<br>systemProp.http.proxyUser=userid<br>systemProp.http.proxyPassword=password<br>systemProp.http.nonProxyHosts=*.nonproxyrepos.com|localhost</pre></li>
</ol>
<h1 id="Https-Proxy"><a href="#Https-Proxy" class="headerlink" title="Https Proxy"></a>Https Proxy</h1><p>systemProp.https.proxyHost=www.somehost.org<br>systemProp.https.proxyPort=8080<br>systemProp.https.proxyUser=userid<br>systemProp.https.proxyPassword=password<br>systemProp.https.nonProxyHosts=*.nonproxyrepos.com|localhost<br>参考：</p>
<ol>
<li><a href="https://docs.gradle.org/current/userguide/build_environment.html" target="_blank" rel="external">https://docs.gradle.org/current/userguide/build_environment.html</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在国内使用Gradle的时候，由于依赖管理时经常需要从mavenCentral（maven中央仓库）和jCenter中下载lib，速度不稳定，有时还会导致build长时间卡住，有一种方法是使用Gradle的Offline模式，但前提是你已经cache了项目的依赖在本地，不然可能会Build失败，另外就是使用代理服务器，也是一种不错的选择。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在Gradle中使用代理服务器的方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;使用以下命令行参数指定代理服务器。&lt;/strong&gt;&lt;br&gt;&lt;pre class=&quot;lang:default decode:true&quot;&gt;gradle -Dhttp.proxyHost=yourProxy -Dhttp.proxyPort=yourPort -Dhttp.proxyUser=usernameProxy -Dhttp.proxyPassword=yourPassoword&lt;/pre&gt;
    
    </summary>
    
      <category term="Java" scheme="http://leimingshan.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://leimingshan.github.io/tags/Java/"/>
    
      <category term="Gradle" scheme="http://leimingshan.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Bug Tracker</title>
    <link href="http://leimingshan.github.io/2016/03/22/bug-tracker/"/>
    <id>http://leimingshan.github.io/2016/03/22/bug-tracker/</id>
    <published>2016-03-22T14:20:38.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在尝试使用一些项目管理工具，之前的文章里提到的代码质量分析工具SonarQube，比较符合使用的期望，效果也不错，还有比较早使用的持续集成工具Jenkins，</p>
<p>然后是缺陷跟踪工具，Bug Tracker System，比较常用的有：</p>
<ol>
<li>Redmine <a href="http://www.redmine.org/" target="_blank" rel="external">http://www.redmine.org/</a> 网站本身就是Redmine示例。</li>
<li>Mantis <a href="http://www.mantisbt.org/" target="_blank" rel="external">http://www.mantisbt.org/</a> demo：<a href="http://www.mantisbt.org/bugs/my_view_page.php" target="_blank" rel="external">http://www.mantisbt.org/bugs/my_view_page.php</a>。</li>
<li>Atlassian JIRA <a href="https://www.atlassian.com/software/jira/" target="_blank" rel="external">https://www.atlassian.com/software/jira/</a> 应用广泛，有云服务版。</li>
<li>Bugzilla <a href="https://www.bugzilla.org/" target="_blank" rel="external">https://www.bugzilla.org/</a><br>类似的工具还有许多，可以查看wiki百科汇总 <a href="https://en.wikipedia.org/wiki/Comparison_of_issue-tracking_systems" target="_blank" rel="external">https://en.wikipedia.org/wiki/Comparison_of_issue-tracking_systems</a>。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在尝试使用一些项目管理工具，之前的文章里提到的代码质量分析工具SonarQube，比较符合使用的期望，效果也不错，还有比较早使用的持续集成工具Jenkins，&lt;/p&gt;
&lt;p&gt;然后是缺陷跟踪工具，Bug Tracker System，比较常用的有：&lt;/p&gt;
&lt;ol&gt;
&lt;l
    
    </summary>
    
      <category term="开发" scheme="http://leimingshan.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL database character set encoding</title>
    <link href="http://leimingshan.github.io/2016/03/08/mysql-database-character-set-encoding/"/>
    <id>http://leimingshan.github.io/2016/03/08/mysql-database-character-set-encoding/</id>
    <published>2016-03-08T03:28:16.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用MySQL的时候很可能遇到字符集编码相关的问题，尤其是涉及到数据和程序中有中文字符的时候，如果不注意，可能遇到乱码或一些其他的错误。</p>
<p>本文详细解释MySQL相关的字符集编码设置和排序规则相关的问题。</p>
<h1 id="MySQL-Server的默认字符集配置"><a href="#MySQL-Server的默认字符集配置" class="headerlink" title="MySQL Server的默认字符集配置"></a>MySQL Server的默认字符集配置</h1><p>在默认安装MySQL的时候，MySQL Server使用的是英文字符集，服务端的默认配置一般是</p>
<p><span style="text-decoration: underline;">character-set-server=latin1</span></p>
<p><span style="text-decoration: underline;">collation-server =latin1_swedish_ci</span></p>
<p>注意latin1字符集是不支持中文的。第一行的character-set当然是指字符集，第二行的collation是指对应该字符集的比较和排序规则。</p>
<p><a href="http://dev.mysql.com/doc/refman/5.7/en/charset-server.html" target="_blank" rel="external">charset-server参考手册</a><a id="more"></a></p>
<p>通过MySQL命令</p>
<p><pre class="lang:mysql decode:true">mysql&gt; SHOW VARIABLES LIKE ‘character%’;</pre><br>可以查看当前服务端的默认配置。</p>
<p>如果在新建数据库的时候不指定character-set和collation，那么就会采用以上的服务器端默认值，所以还是推荐大家手动指定。示例如下：</p>
<p><pre class="lang:mysql decode:true ">CREATE DATABASE mydb<br>  DEFAULT CHARACTER SET utf8<br>  DEFAULT COLLATE utf8_general_ci;</pre><br>使用utf8和utf8_general_ci是在中英文应用环境下比较常用的一种设置，排序规则还有utf8_unicode_ci，另外还有编码utf8mb4和对应的排序规则，具体区别会在后面的文章说明。<!--more--></p>
<h1 id="修改已有数据库的字符编码"><a href="#修改已有数据库的字符编码" class="headerlink" title="修改已有数据库的字符编码"></a>修改已有数据库的字符编码</h1><p>如果之前已经建立好了数据库，需要修改当前数据库的编码，可以使用ALTER DATABASE命令。</p>
<p>首先查看当前数据库的编码和排序规则；</p>
<p><pre class="lang:mysql decode:true ">mysql&gt; USE mydb;<br>Database changed<br>mysql&gt; SHOW VARIABLES LIKE ‘character_set_database’;<br>+————————+——-+<br>| Variable_name          | Value |<br>+————————+——-+<br>| character_set_database | utf8  |<br>+————————+——-+<br>1 row in set (0.00 sec)</pre></p>
<p>mysql&gt; mysql&gt; SHOW VARIABLES LIKE ‘collation_database’;<br>+——————–+—————–+<br>| Variable_name      | Value           |<br>+——————–+—————–+<br>| collation_database | utf8_general_ci |<br>+——————–+—————–+<br>1 row in set (0.01 sec)</p>
<p>mysql&gt;<br><br>然后就可以根据情况修改为自己需要的编码设置了；</p>
<p><pre class="lang:mysql decode:true">mysql&gt; ALTER DATABASE databasename CHARACTER SET utf8 COLLATE utf8_general_ci;</pre><br>参考：</p>
<ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/charset-database.html" target="_blank" rel="external">数据库的字符集</a></li>
<li>修改具体table编码的方法，<a href="https://dev.mysql.com/doc/refman/5.7/en/charset-unicode-upgrading.html" target="_blank" rel="external">charset-unicode-upgrading参考手册</a>。</li>
</ul>
<h1 id="修改MySQL的服务端配置"><a href="#修改MySQL的服务端配置" class="headerlink" title="修改MySQL的服务端配置"></a>修改MySQL的服务端配置</h1><p>修改my.cnf配置文件可以修改MySQL Server的默认字符集等设置。以配置文件在/etc/my.cnf（可能根据具体安装情况不同）为例，修改以下几项即可：</p>
<p><pre class="lang:default decode:true">[client]<br>default-character-set = utf8</pre></p>
<p>[mysql]<br>default-character-set = utf8</p>
<p>[mysqld]<br>init-connect = ‘SET NAMES utf8’<br>character-set-server = utf8<br>collation-server = utf8_unicode_ci<br>参考</p>
<ul>
<li>配置方法：<a href="http://stackoverflow.com/questions/3513773/change-mysql-default-character-set-to-utf-8-in-my-cnf" target="_blank" rel="external">http://stackoverflow.com/questions/3513773/change-mysql-default-character-set-to-utf-8-in-my-cnf</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/charset-connection.html" target="_blank" rel="external">SET NAMES的官方解释</a><br>&nbsp;</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用MySQL的时候很可能遇到字符集编码相关的问题，尤其是涉及到数据和程序中有中文字符的时候，如果不注意，可能遇到乱码或一些其他的错误。&lt;/p&gt;
&lt;p&gt;本文详细解释MySQL相关的字符集编码设置和排序规则相关的问题。&lt;/p&gt;
&lt;h1 id=&quot;MySQL-Server的默认字符集配置&quot;&gt;&lt;a href=&quot;#MySQL-Server的默认字符集配置&quot; class=&quot;headerlink&quot; title=&quot;MySQL Server的默认字符集配置&quot;&gt;&lt;/a&gt;MySQL Server的默认字符集配置&lt;/h1&gt;&lt;p&gt;在默认安装MySQL的时候，MySQL Server使用的是英文字符集，服务端的默认配置一般是&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;character-set-server=latin1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;collation-server =latin1_swedish_ci&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;注意latin1字符集是不支持中文的。第一行的character-set当然是指字符集，第二行的collation是指对应该字符集的比较和排序规则。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/charset-server.html&quot;&gt;charset-server参考手册&lt;/a&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://leimingshan.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="http://leimingshan.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Gradle与SonarQube的应用</title>
    <link href="http://leimingshan.github.io/2016/03/04/gradle-sonarqube/"/>
    <id>http://leimingshan.github.io/2016/03/04/gradle-sonarqube/</id>
    <published>2016-03-04T08:19:50.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先是<a href="http://docs.sonarqube.org/display/SONAR/Analyzing+with+SonarQube+Scanner+for+Gradle" target="_blank" rel="external">官方文档</a>。这里使用的是新的Gradle SonarQube plugin，注意与以往的Gradle Sonar和Runner插件区分，官方不推荐使用旧插件。</p>
<p><a href="https://plugins.gradle.org/plugin/org.sonarqube" target="_blank" rel="external">SonarQube插件说明</a></p>
<p>Github示例可以参考<a href="https://github.com/SonarSource/sonar-examples/tree/master/projects/languages/java/gradle/java-gradle-simple" target="_blank" rel="external">java-gradle-simple</a>，注意里面build.gradle脚本的写法，以及如何执行SonarQube的Task。</p>
<p>&nbsp;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先是&lt;a href=&quot;http://docs.sonarqube.org/display/SONAR/Analyzing+with+SonarQube+Scanner+for+Gradle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;。
    
    </summary>
    
      <category term="Java" scheme="http://leimingshan.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://leimingshan.github.io/tags/Java/"/>
    
      <category term="Gradle" scheme="http://leimingshan.github.io/tags/Gradle/"/>
    
      <category term="SonarQube" scheme="http://leimingshan.github.io/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title>本站开始启用全站Https</title>
    <link href="http://leimingshan.github.io/2016/03/04/website-https/"/>
    <id>http://leimingshan.github.io/2016/03/04/website-https/</id>
    <published>2016-03-04T01:32:44.000Z</published>
    <updated>2018-08-28T09:08:52.702Z</updated>
    
    <content type="html"><![CDATA[<p>从今天起本Blog开始启用全站Https。<br>未来的大趋势嘛，哈哈！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从今天起本Blog开始启用全站Https。&lt;br&gt;未来的大趋势嘛，哈哈！&lt;/p&gt;

    
    </summary>
    
      <category term="网站" scheme="http://leimingshan.github.io/categories/%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="web" scheme="http://leimingshan.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins SonarQube的搭配使用</title>
    <link href="http://leimingshan.github.io/2016/03/04/jenkins-sonarqube/"/>
    <id>http://leimingshan.github.io/2016/03/04/jenkins-sonarqube/</id>
    <published>2016-03-04T01:20:14.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins在Ubuntu环境下的安装配置都比较简单，在安装好Java JDK之后，使用</p>
<p><pre class="">sudo apt-get install jenkins</pre><br>即可安装。因为没有用到后台数据库，配置过程一般就是配置端口号，以及Nginx或Apache server的代理即可。</p>
<p>详细方法可以参考<a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu" target="_blank" rel="external">官方安装指南</a>。</p>
<p>接下来就是与代码质量分析平台SonarQube的结合使用，前面已经说明了SonarQube的安装，然后就是利用Jenkins在进行持续集成的过程中，进行代码质量分析、代码覆盖率分析，并将相关数据和报告通知给SonarQube。</p>
<p>在Jenkins中的“系统管理”-“管理插件”中搜索安装SonarQube Plugin，因为我使用的是Java Gradle工程和JaCoCo测试报告，所以之前也安装了Gradle Plugin和JaCoCo Plugin，这里大家可以根据自己具体的项目选择。<a id="more"></a></p>
<p>在安装好SonarQube Plugin之后，记得在系统设置中配置SonarQube服务器的相关信息，可以参考下图进行。</p>
<p><a href="http://www.leimingshan.com/wp-content/uploads/2016/03/SonarQube-Plugin.jpg" target="_blank" rel="external"><img src="http://www.leimingshan.com/wp-content/uploads/2016/03/SonarQube-Plugin-300x91.jpg" alt="SonarQube Plugin"></a></p>
<p>另外注意配置SonarQube scanner，这里可以选择自动安装，或者选择自己安装的目录位置。</p>
<p><a href="http://www.leimingshan.com/wp-content/uploads/2016/03/SonarQube-Runner.jpg" target="_blank" rel="external"><img src="http://www.leimingshan.com/wp-content/uploads/2016/03/SonarQube-Runner-300x51.jpg" alt="SonarQube Runner"></a></p>
<p>服务器配置好之后，然后就是在具体的项目中配置构建过程，选择“增加构建步骤”中的Invoke Standalone SonarQube Analysis，参考下图。</p>
<p><a href="http://www.leimingshan.com/wp-content/uploads/2016/03/SonarQube-Analysis.jpg" target="_blank" rel="external"><img src="http://www.leimingshan.com/wp-content/uploads/2016/03/SonarQube-Analysis-300x131.jpg" alt="SonarQube Analysis"></a></p>
<p>具体的配置如下：</p>
<p><pre class="lang:default decode:true "># required metadata<br>sonar.projectKey=pminer:MongoDB-ImportXMLProfile<br>sonar.projectName=MongoDB-ImportXMLProfile<br>sonar.projectVersion=1.0</pre></p>
<h1 id="path-to-source-directories-required"><a href="#path-to-source-directories-required" class="headerlink" title="path to source directories (required)"></a>path to source directories (required)</h1><p>sonar.sources=src/main/java</p>
<h1 id="path-to-test-source-directories-optional"><a href="#path-to-test-source-directories-optional" class="headerlink" title="path to test source directories (optional)"></a>path to test source directories (optional)</h1><p>sonar.tests=src/test/java</p>
<p>sonar.java.binaries=build/classes</p>
<p>sonar.language=java</p>
<p>#Tells SonarQube where the unit tests execution reports are<br>sonar.junit.reportsPath=reports/tests</p>
<p>#Tells SonarQube where the unit tests code coverage report is<br>sonar.jacoco.reportPath=build/jacoco/test.exec</p>
<h1 id="Encoding-of-the-source-files"><a href="#Encoding-of-the-source-files" class="headerlink" title="Encoding of the source files"></a>Encoding of the source files</h1><p>sonar.sourceEncoding=UTF-8<br>注意以上的配置要根据自己具体的项目路径配置。</p>
<p>这样在下次的构建中，就会之前SonarQube的分析任务，并将结果发送给SonarQube服务器，然后访问服务器平台就能看到代码的质量报告。</p>
<p>参考：<a href="http://docs.sonarqube.org/display/PLUG/Code+Coverage+by+Unit+Tests+for+Java+Project" target="_blank" rel="external">http://docs.sonarqube.org/display/PLUG/Code+Coverage+by+Unit+Tests+for+Java+Project</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins在Ubuntu环境下的安装配置都比较简单，在安装好Java JDK之后，使用&lt;/p&gt;
&lt;p&gt;&lt;pre class=&quot;&quot;&gt;sudo apt-get install jenkins&lt;/pre&gt;&lt;br&gt;即可安装。因为没有用到后台数据库，配置过程一般就是配置端口号，以及Nginx或Apache server的代理即可。&lt;/p&gt;
&lt;p&gt;详细方法可以参考&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu&quot;&gt;官方安装指南&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;接下来就是与代码质量分析平台SonarQube的结合使用，前面已经说明了SonarQube的安装，然后就是利用Jenkins在进行持续集成的过程中，进行代码质量分析、代码覆盖率分析，并将相关数据和报告通知给SonarQube。&lt;/p&gt;
&lt;p&gt;在Jenkins中的“系统管理”-“管理插件”中搜索安装SonarQube Plugin，因为我使用的是Java Gradle工程和JaCoCo测试报告，所以之前也安装了Gradle Plugin和JaCoCo Plugin，这里大家可以根据自己具体的项目选择。
    
    </summary>
    
      <category term="Java" scheme="http://leimingshan.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://leimingshan.github.io/tags/Java/"/>
    
      <category term="SonarQube" scheme="http://leimingshan.github.io/tags/SonarQube/"/>
    
      <category term="Jenkins" scheme="http://leimingshan.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>SonarQube-代码质量管理平台的安装</title>
    <link href="http://leimingshan.github.io/2016/02/25/sonarqube-install/"/>
    <id>http://leimingshan.github.io/2016/02/25/sonarqube-install/</id>
    <published>2016-02-25T05:49:30.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>JDK，数据库（以下以MySQL为例），操作系统支持Linux和Windows（文章以Linux Ubuntu 14.04为例）。</p>
<h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><p>终端进入mysql-client：</p>
<pre class="lang:default decode:true ">mysql -u root -p</pre>
执行以下SQL语句建立数据库和相关用户：
<pre class="lang:default decode:true">CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci;
CREATE USER 'sonar' IDENTIFIED BY 'sonar';
GRANT ALL ON sonar.* TO 'sonar'@'%' IDENTIFIED BY 'sonar';
GRANT ALL ON sonar.* TO 'sonar'@'localhost' IDENTIFIED BY 'sonar';
FLUSH PRIVILEGES;</pre>
<a id="more"></a>

## 下载并解压SonarQube安装包

在[SonarQube官网](http://www.sonarqube.org/downloads/)获取最新的下载地址。
<pre class="lang:default decode:true ">wget https://sonarsource.bintray.com/Distribution/sonarqube/sonarqube-5.3.zip
unzip sonarqube-5.3.zip
sudo mv sonarqube-5.3 /usr/local/sonar</pre>

<h2 id="编辑配置文件sonar-properties"><a href="#编辑配置文件sonar-properties" class="headerlink" title="编辑配置文件sonar.properties"></a>编辑配置文件sonar.properties</h2><p>编辑conf目录下的sonar.properties，主要修改数据库配置和web server配置，取消相应行的注释并编辑为对应的值。</p>
<pre class="lang:default decode:true ">sonar.jdbc.username=sonar
sonar.jdbc.password=sonar
sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance
</pre>
以下的web server配置允许以下地址访问 http://127.0.0.1:9000/sonar
<pre class="lang:default decode:true ">sonar.web.host=127.0.0.1 #默认是0.0.0.0，绑定本机所有ip地址
sonar.web.context=/sonar #默认是空
sonar.web.port=9000</pre>

<h2 id="配置Service运行"><a href="#配置Service运行" class="headerlink" title="配置Service运行"></a>配置Service运行</h2><p>参考<a href="http://docs.sonarqube.org/display/SONAR/Running+SonarQube+as+a+Service+on+Linux" target="_blank" rel="external">官方文档</a></p>
<p>新建/etc/init.d/sonar文件并编辑如下。</p>
<p><pre class="lang:default decode:true ">#!/bin/sh<br>#</pre></p>
<h1 id="rc-file-for-SonarQube"><a href="#rc-file-for-SonarQube" class="headerlink" title="rc file for SonarQube"></a>rc file for SonarQube</h1><p>#</p>
<h1 id="chkconfig-345-96-10"><a href="#chkconfig-345-96-10" class="headerlink" title="chkconfig: 345 96 10"></a>chkconfig: 345 96 10</h1><h1 id="description-SonarQube-system-www-sonarsource-org"><a href="#description-SonarQube-system-www-sonarsource-org" class="headerlink" title="description: SonarQube system (www.sonarsource.org)"></a>description: SonarQube system (www.sonarsource.org)</h1><p>#</p>
<h3 id="BEGIN-INIT-INFO"><a href="#BEGIN-INIT-INFO" class="headerlink" title="BEGIN INIT INFO"></a>BEGIN INIT INFO</h3><h1 id="Provides-sonar"><a href="#Provides-sonar" class="headerlink" title="Provides: sonar"></a>Provides: sonar</h1><h1 id="Required-Start-network"><a href="#Required-Start-network" class="headerlink" title="Required-Start: $network"></a>Required-Start: $network</h1><h1 id="Required-Stop-network"><a href="#Required-Stop-network" class="headerlink" title="Required-Stop: $network"></a>Required-Stop: $network</h1><h1 id="Default-Start-3-4-5"><a href="#Default-Start-3-4-5" class="headerlink" title="Default-Start: 3 4 5"></a>Default-Start: 3 4 5</h1><h1 id="Default-Stop-0-1-2-6"><a href="#Default-Stop-0-1-2-6" class="headerlink" title="Default-Stop: 0 1 2 6"></a>Default-Stop: 0 1 2 6</h1><h1 id="Short-Description-SonarQube-system-www-sonarsource-org"><a href="#Short-Description-SonarQube-system-www-sonarsource-org" class="headerlink" title="Short-Description: SonarQube system (www.sonarsource.org)"></a>Short-Description: SonarQube system (www.sonarsource.org)</h1><h1 id="Description-SonarQube-system-www-sonarsource-org"><a href="#Description-SonarQube-system-www-sonarsource-org" class="headerlink" title="Description: SonarQube system (www.sonarsource.org)"></a>Description: SonarQube system (www.sonarsource.org)</h1><h3 id="END-INIT-INFO"><a href="#END-INIT-INFO" class="headerlink" title="END INIT INFO"></a>END INIT INFO</h3><p>/usr/bin/sonar $*<br>运行以下命令安装服务并运行，注意bin子目录的32位64位区别。</p>
<p><pre class="lang:default decode:true">sudo ln -s $SONAR_HOME/bin/linux-x86-64/sonar.sh /usr/bin/sonar<br>sudo chmod 755 /etc/init.d/sonar<br>sudo update-rc.d sonar defaults<br>sudo service sonar start</pre><br>&nbsp;</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h2&gt;&lt;p&gt;JDK，数据库（以下以MySQL为例），操作系统支持Linux和Windows（文章以Linux Ubuntu 14.04为例）。&lt;/p&gt;
&lt;h2 id=&quot;数据库配置&quot;&gt;&lt;a href=&quot;#数据库配置&quot; class=&quot;headerlink&quot; title=&quot;数据库配置&quot;&gt;&lt;/a&gt;数据库配置&lt;/h2&gt;&lt;p&gt;终端进入mysql-client：&lt;/p&gt;
&lt;pre class=&quot;lang:default decode:true &quot;&gt;mysql -u root -p&lt;/pre&gt;
执行以下SQL语句建立数据库和相关用户：
&lt;pre class=&quot;lang:default decode:true&quot;&gt;CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci;
CREATE USER &#39;sonar&#39; IDENTIFIED BY &#39;sonar&#39;;
GRANT ALL ON sonar.* TO &#39;sonar&#39;@&#39;%&#39; IDENTIFIED BY &#39;sonar&#39;;
GRANT ALL ON sonar.* TO &#39;sonar&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;sonar&#39;;
FLUSH PRIVILEGES;&lt;/pre&gt;
    
    </summary>
    
      <category term="开发" scheme="http://leimingshan.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://leimingshan.github.io/tags/Java/"/>
    
      <category term="SonarQube" scheme="http://leimingshan.github.io/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu14.04使用ppa源安装PHP-7</title>
    <link href="http://leimingshan.github.io/2016/02/05/ubuntu-ppa-install-php7/"/>
    <id>http://leimingshan.github.io/2016/02/05/ubuntu-ppa-install-php7/</id>
    <published>2016-02-05T06:03:12.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Ubuntu 14.04下安装PHP除了可以直接从官网下载源码编译安装，也可以PPA源安装。如果读者对编译安装的各种选项和配置方法不是很熟悉的话，则推荐使用这种方法快速安装。</p>
<p>在安装的时候，这里选择的是比较流行的一位个人作者维护的一个PPA源，具体的使用方法如下：</p>
<ol>
<li><p>添加源。</p>
<pre class="lang:default decode:true">sudo LC_ALL=en_US.UTF-8 add-apt-repository ppa:ondrej/php</pre>
</li>
<li><p>如果有之前使用apt-get方法安装的PHP，先删除后再安装PHP7。</p>
<pre class="lang:default decode:true">sudo apt-get update
sudo apt-get purge php5-common -y
sudo apt-get install php7.0 php7.0-fpm php7.0-mysql -y
sudo apt-get --purge autoremove -y</pre>
</li>
<li><p>如果使用nginx，注意以下配置和相应的用户权限。</p>
<pre class="lang:default decode:true ">fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;</pre>

</li>
</ol>
<p>参考：</p>
<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-upgrade-to-php-7-on-ubuntu-14-04" target="_blank" rel="external">How To Upgrade to PHP 7 on Ubuntu 14.04</a></li>
<li><a href="http://askubuntu.com/questions/705880/how-to-install-php-7" target="_blank" rel="external">How to install PHP 7?</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Ubuntu 14.04下安装PHP除了可以直接从官网下载源码编译安装，也可以PPA源安装。如果读者对编译安装的各种选项和配置方法不是很熟悉的话，则推荐使用这种方法快速安装。&lt;/p&gt;
&lt;p&gt;在安装的时候，这里选择的是比较流行的一位个人作者维护的一个PPA源，具体的使用方法
    
    </summary>
    
      <category term="Linux" scheme="http://leimingshan.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://leimingshan.github.io/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://leimingshan.github.io/tags/Ubuntu/"/>
    
      <category term="PHP" scheme="http://leimingshan.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB--mongoimport loses connection when importing big files</title>
    <link href="http://leimingshan.github.io/2016/01/20/mongoimport-loses-connection-when-importing-big-files/"/>
    <id>http://leimingshan.github.io/2016/01/20/mongoimport-loses-connection-when-importing-big-files/</id>
    <published>2016-01-20T06:36:20.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在新版本下进行MongoDB数据导入的时候，遇到了这样一个问题，例如使用如下命令：</p>
<p><pre class="lang:default decode:true">mongoimport -d test -c profile users.dat</pre><br>在之前使用过几次这样的导入方法都没有问题，但这次却提示：</p>
<p><pre class="lang:default decode:true">2016-01-20T10:05:25.228+0100    connected to: localhost<br>2016-01-20T10:05:25.735+0100    error inserting documents: lost connection to server<br>2016-01-20T10:05:25.735+0100    Failed: lost connection to server<br>2016-01-20T10:05:25.735+0100    imported 0 documents</pre><br>查看MongoDB的Log，发现出现异常的原因，如下：</p>
<p><pre class="lang:default decode:true ">2016-01-20T11:26:39.103+0800 I -        [conn17] Assertion: 10334:BSONObj size: 33562755 (0x2002083) is invalid. Size must be between 0 and 16793600(16MB) First element: insert: “Profile”</pre><br>搜索解决方案，发现这是mongo工具包在新版本下的小bug，mongorestore和mongoimport都有一样的问题，官方说明可以参考<a href="https://jira.mongodb.org/browse/TOOLS-939" target="_blank" rel="external">https://jira.mongodb.org/browse/TOOLS-939</a>。</p>
<p>原因就是bulk write api，原来的api中批量写入的batch size最大是32MB，现在已经变为16MB了。在导入或还原数据的时候，指定选项 –batchSize=1000，指定一个较小的值即可，默认是10000。</p>
<p>参考：</p>
<ol>
<li><a href="http://stackoverflow.com/questions/33475505/mongodb-mongoimport-loses-connection-when-importing-big-files" target="_blank" rel="external">http://stackoverflow.com/questions/33475505/mongodb-mongoimport-loses-connection-when-importing-big-files</a></li>
<li><a href="https://jira.mongodb.org/browse/TOOLS-939" target="_blank" rel="external">https://jira.mongodb.org/browse/TOOLS-939</a></li>
<li><a href="http://chenzhou123520.iteye.com/blog/1641319" target="_blank" rel="external">http://chenzhou123520.iteye.com/blog/1641319</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在新版本下进行MongoDB数据导入的时候，遇到了这样一个问题，例如使用如下命令：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&quot;lang:default decode:true&quot;&gt;mongoimport -d test -c profile users.dat&lt;/pre&gt;&lt;b
    
    </summary>
    
      <category term="数据库" scheme="http://leimingshan.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="NoSQL" scheme="http://leimingshan.github.io/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu, Debian中iptables规则保存和重启自动加载</title>
    <link href="http://leimingshan.github.io/2016/01/13/debian-iptables-save/"/>
    <id>http://leimingshan.github.io/2016/01/13/debian-iptables-save/</id>
    <published>2016-01-13T14:01:31.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Debian中iptables命令输完之后会立刻生效，但重启之后配置就会消失，Debian提供了一个iptables-save程序快速保存配置。</p>
<p>通过iptables-save和iptables-restore可以让debian自动保存并在开机时自动加载iptables规则。</p>
<h3 id="1、将iptables配置保存到-etc-iptables，这个文件名可以自己定义，与下面的配置一致即可"><a href="#1、将iptables配置保存到-etc-iptables，这个文件名可以自己定义，与下面的配置一致即可" class="headerlink" title="1、将iptables配置保存到/etc/iptables，这个文件名可以自己定义，与下面的配置一致即可"></a>1、将iptables配置保存到/etc/iptables，这个文件名可以自己定义，与下面的配置一致即可</h3><pre class="lang:default decode:true">iptables-save &gt; /etc/iptables</pre>

<h3 id="2、创建并编辑自启动配置文件，内容为启动网络时恢复iptables配置"><a href="#2、创建并编辑自启动配置文件，内容为启动网络时恢复iptables配置" class="headerlink" title="2、创建并编辑自启动配置文件，内容为启动网络时恢复iptables配置"></a>2、创建并编辑自启动配置文件，内容为启动网络时恢复iptables配置</h3><p><pre class="lang:default decode:true">sudo vim /etc/network/if-pre-up.d/iptables</pre><br>文件内容为：</p>
<p><pre class="lang:default decode:true ">#!/bin/sh<br>/sbin/iptables-restore &lt; /etc/iptables</pre><br>保存并退出。</p>
<p>之后系统每次启动时iptables就可以自动加载规则了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Debian中iptables命令输完之后会立刻生效，但重启之后配置就会消失，Debian提供了一个iptables-save程序快速保存配置。&lt;/p&gt;
&lt;p&gt;通过iptables-save和iptables-restore可以让debian自动保存并在开机时自动加载ip
    
    </summary>
    
      <category term="Linux" scheme="http://leimingshan.github.io/categories/Linux/"/>
    
    
      <category term="Ubuntu" scheme="http://leimingshan.github.io/tags/Ubuntu/"/>
    
      <category term="Debian" scheme="http://leimingshan.github.io/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ相关产品注册</title>
    <link href="http://leimingshan.github.io/2016/01/04/intellij-products-register/"/>
    <id>http://leimingshan.github.io/2016/01/04/intellij-products-register/</id>
    <published>2016-01-04T08:06:11.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>需要的同学可以查看以下网址。当然还是推荐大家去官网购买使用。</p>
<p><a href="http://idea.lanyus.com/" target="_blank" rel="external">http://idea.lanyus.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需要的同学可以查看以下网址。当然还是推荐大家去官网购买使用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://idea.lanyus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://idea.lanyus.com/&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="开发" scheme="http://leimingshan.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="develop" scheme="http://leimingshan.github.io/tags/develop/"/>
    
  </entry>
  
  <entry>
    <title>MySQL FIND_IN_SET Usage</title>
    <link href="http://leimingshan.github.io/2016/01/04/mysql-find-in-set-usage/"/>
    <id>http://leimingshan.github.io/2016/01/04/mysql-find-in-set-usage/</id>
    <published>2016-01-04T08:04:59.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL手册中FIND_IN_SET函数的语法:</p>
<p>FIND_IN_SET(str, strlist)</p>
<p>Returns a value in the range of 1 to <em><code>N</code></em> if the string <em><code>str</code></em> is in the string list <em><code>strlist</code></em> consisting of <em><code>N</code></em> substrings. A string list is a string composed of substrings separated by <span class="quote">“<span class="quote"><code>,</code></span>”</span> characters. If the first argument is a constant string and the second is a column of type <a href="http://dev.mysql.com/doc/refman/5.7/en/set.html" title="11.4.5 The SET Type" target="_blank" rel="external"><code>SET</code></a>, the <a href="http://dev.mysql.com/doc/refman/5.7/en/string-functions.html#function_find-in-set" target="_blank" rel="external"><code>FIND_IN_SET()</code></a> function is optimized to use bit arithmetic. Returns <code>0</code> if <em><code>str</code></em> is not in <em><code>strlist</code></em> or if <em><code>strlist</code></em> is the empty string. Returns <code>NULL</code> if either argument is <code>NULL</code>. This function does not work properly if the first argument contains a comma (<span class="quote">“<span class="quote"><code>,</code></span>”</span>) character.</p>
<p>假如字符串str 在由N 子链组成的字符串列表strlist 中，则返回值的范围在 1 到 N 之间。<br>一个字符串列表就是一个由一些被‘,’符号分开的子链组成的字符串。如果第一个参数是一个常数字符串，而第二个是type SET列，则   FIND_IN_SET() 函数被优化，使用比特计算。<br>如果str不在strlist 或strlist 为空字符串，则返回值为 0 。如任意一个参数为NULL，则返回值为 NULL。这个函数在第一个参数包含一个逗号(‘,’)时将无法正常运行。<a id="more"></a></p>
<p>例如：</p>
<p><pre class="lang:default decode:true ">mysql&gt; SELECT FIND_IN_SET(‘b’,’a,b,c,d’);<br>        -&gt; 2</pre><br><a href="http://dev.mysql.com/doc/refman/5.7/en/string-functions.html#function_substring-index" target="_blank" rel="external"><code>SUBSTRING_INDEX(_&lt;code&gt;str</code><em>,</em><code>delim</code><em>,</em><code>count</code>_)</a></p>
<p>Returns the substring from string <em><code>str</code></em> before <em><code>count</code></em> occurrences of the delimiter <em><code>delim</code></em>. If <em><code>count</code></em> is positive, everything to the left of the final delimiter (counting from the left) is returned. If <em><code>count</code></em> is negative, everything to the right of the final delimiter (counting from the right) is returned. <a href="http://dev.mysql.com/doc/refman/5.7/en/string-functions.html#function_substring-index" target="_blank" rel="external"><code>SUBSTRING_INDEX()</code></a> performs a case-sensitive match when searching for <em><code>delim</code></em>.</p>
<p><pre class="lang:default decode:true ">mysql&gt; SELECT SUBSTRING_INDEX(‘www.mysql.com’, ‘.’, 2);<br>        -&gt; ‘www.mysql’<br>mysql&gt; SELECT SUBSTRING_INDEX(‘www.mysql.com’, ‘.’, -2);<br>        -&gt; ‘mysql.com’</pre><br>This function is multibyte safe.</p>
<p>&nbsp;</p>
<p>MySQL中使用WHERE IN进行条件查询的时候，一般情况下，查询的结果和IN中值的顺序并不一致。</p>
<p>有两种方式可以对IN查询的结果进行排序。一种是ORDER BY FIND_IN_SET，另外一种是ORDER BY SUBSTRING_INDEX。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL手册中FIND_IN_SET函数的语法:&lt;/p&gt;
&lt;p&gt;FIND_IN_SET(str, strlist)&lt;/p&gt;
&lt;p&gt;Returns a value in the range of 1 to &lt;em&gt;&lt;code&gt;N&lt;/code&gt;&lt;/em&gt; if the string &lt;em&gt;&lt;code&gt;str&lt;/code&gt;&lt;/em&gt; is in the string list &lt;em&gt;&lt;code&gt;strlist&lt;/code&gt;&lt;/em&gt; consisting of &lt;em&gt;&lt;code&gt;N&lt;/code&gt;&lt;/em&gt; substrings. A string list is a string composed of substrings separated by &lt;span class=&quot;quote&quot;&gt;“&lt;span class=&quot;quote&quot;&gt;&lt;code&gt;,&lt;/code&gt;&lt;/span&gt;”&lt;/span&gt; characters. If the first argument is a constant string and the second is a column of type &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/set.html&quot; title=&quot;11.4.5 The SET Type&quot;&gt;&lt;code&gt;SET&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/string-functions.html#function_find-in-set&quot;&gt;&lt;code&gt;FIND_IN_SET()&lt;/code&gt;&lt;/a&gt; function is optimized to use bit arithmetic. Returns &lt;code&gt;0&lt;/code&gt; if &lt;em&gt;&lt;code&gt;str&lt;/code&gt;&lt;/em&gt; is not in &lt;em&gt;&lt;code&gt;strlist&lt;/code&gt;&lt;/em&gt; or if &lt;em&gt;&lt;code&gt;strlist&lt;/code&gt;&lt;/em&gt; is the empty string. Returns &lt;code&gt;NULL&lt;/code&gt; if either argument is &lt;code&gt;NULL&lt;/code&gt;. This function does not work properly if the first argument contains a comma (&lt;span class=&quot;quote&quot;&gt;“&lt;span class=&quot;quote&quot;&gt;&lt;code&gt;,&lt;/code&gt;&lt;/span&gt;”&lt;/span&gt;) character.&lt;/p&gt;
&lt;p&gt;假如字符串str 在由N 子链组成的字符串列表strlist 中，则返回值的范围在 1 到 N 之间。&lt;br&gt;一个字符串列表就是一个由一些被‘,’符号分开的子链组成的字符串。如果第一个参数是一个常数字符串，而第二个是type SET列，则   FIND_IN_SET() 函数被优化，使用比特计算。&lt;br&gt;如果str不在strlist 或strlist 为空字符串，则返回值为 0 。如任意一个参数为NULL，则返回值为 NULL。这个函数在第一个参数包含一个逗号(‘,’)时将无法正常运行。
    
    </summary>
    
      <category term="数据库" scheme="http://leimingshan.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="http://leimingshan.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>win10-kms-openwrt</title>
    <link href="http://leimingshan.github.io/2015/10/03/win10-kms-openwrt/"/>
    <id>http://leimingshan.github.io/2015/10/03/win10-kms-openwrt/</id>
    <published>2015-10-03T14:58:33.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.right.com.cn/forum/thread-174651-1-2.html" target="_blank" rel="external">http://www.right.com.cn/forum/thread-174651-1-2.html</a></p>
<p><a href="http://www.right.com.cn/forum/thread-174287-1-1.html" target="_blank" rel="external">http://www.right.com.cn/forum/thread-174287-1-1.html</a></p>
<p><a href="http://www.right.com.cn/forum/thread-159625-1-1.html" target="_blank" rel="external">http://www.right.com.cn/forum/thread-159625-1-1.html</a></p>
<p>openwrt luci</p>
<p>具体安装位置如下：</p>
<p><pre class="lang:default decode:true ">/etc/vlmcsd.ini<br>/usr/sbin/vlmcsd<br></pre><br><a href="http://www.leimingshan.com/wp-content/uploads/2015/10/vlmcsd-svn812-2015-08-30-Hotbird64.7z" target="_blank" rel="external">vlmcsd-svn812-2015-08-30-Hotbird64</a></p>
<p>Password: 2015</p>
<p>具体激活使用方法：</p>
<p><pre class="lang:default decode:true ">slmgr.vbs /skms 192.168.1.1<br>slmgr.vbs /ipk XXXXX-XXXXX-XXXXX-XXXXX-XXXXX<br>slmgr.vbs /ato<br>slmgr.vbs /xpr</pre></p>
<p>cd C:\Program Files\Microsoft Office\Office15<br>cscript ospp.vbs /sethst:192.168.1.1<br>cscript ospp.vbs /act<br>cscript ospp.vbs /dstatus<br><a id="more"></a></p>
<p><span style="color: #ff0000;">更新下载地址，</span><br><span style="color: #ff0000;">国内地址：</span><span style="color: #336699;"><u><a href="http://download.3kkk.org:90/os/vlmcsd-svn812-2015-08-30-Hotbird64.7z" target="_blank" rel="external">http://download.3kkk.org:90/os/vlmcsd-svn812-2015-08-30-Hotbird64.7z</a></u></span><span style="color: #336699;"><u>官方地址：<a href="http://rghost.net/6G8wYxwnX" target="_blank" rel="external">http://rghost.net/6G8wYxwnX</a><br></u></span><span style="color: #ff0000;">官方站点：<a href="http://forums.mydigitallife.info/threads/50234-Emulated-KMS-Servers-on-non-Windows-platforms" target="_blank" rel="external">http://forums.mydigitallife.info … n-Windows-platforms</a></span><br><span style="color: #ff0000;">解压密码 2015 </span><br><span style="color: #000000;">压缩包指纹：<br>MD50f1a9489ccad4a77d3b8f3ee893ede91</span><br><span style="color: #000000;">SHA1f4daa5cb5f3c4f170c0d343982ce2c1a6a88376f</span><br><span style="font-size: x-large;"><span style="color: #ff0000;">支持windows 10 激活 ，office 2016亲测 可用。</span></span><br><span style="font-size: x-large;"><span style="color: #ff0000;">说明:现在下载到的一般是零售版，是不能用kms激活的，需要转换成批量授权的才行。</span></span><br><span style="font-size: x-large;"><span style="color: #ff0000;">附转换工具，就是替换几个文件，下载地址：</span></span><a href="http://download.3kkk.org:90/os/office2016%20Retail%e8%bd%acVOL%e5%b9%b6%e6%bf%80%e6%b4%bb.rar" target="_blank" rel="external"><span style="font-size: x-large;">点我下载</span></a></p>
<p>下载附件<br>把附件的三个文件传到路由器上<br>创建目录<br>mkdir /opt/kms  （随意自己定位置。位置不限）<br>复制三个文件 vlmcsd kmsserver.pid kmsserver.ini 到 /opt/kms<br>给vlmcsd 添加执行权限 chmod a+x vlmcsd<br>启动kms服务<br>/opt/kms/vlmcsd -i /opt/kms/kmsserver.ini -p /opt/kms/kmsserver.pid<br>测试服务器<br>在window 下进入cmd 切换到kmsclient.exe 目录<br>运行<br>kmsclient 1688 192.168.1.1 Windows<br>kmsclient 1688 192.168.1.1 Office2010<br>kmsclient 1688 192.168.1.1 Office2013<br>分别测试 类似这样就是成功了.<br>KMS Client Emulator started successfully.<br>Successfully received response from KMS Server.<br>KMS Server PID: 55041-00096-200-625305-03-1049-7601.0000-057201.<br>Activation request (KMS V4.0) 1 of 1 sent.</p>
<p>&nbsp;</p>
<p>附件下载 <img src="http://www.right.com.cn/forum/static/image/filetype/rar.gif" alt=""> <span id="attach_103839"><a href="http://www.right.com.cn/forum/forum.php?mod=attachment&amp;aid=MTAzODM5fGFmZDVmYWMzfDE0NDY5OTcyMTZ8MHwxNTk2MjU%3D" target="_blank" rel="external">路由器kms.rar</a> <em>(201.85 KB, 下载次数: 505)</em> </span><br>补充说明一下：官方下载下来是一个5M多的压缩包，里面包含了几乎所有平台的以及源代码<br>binaries 目录里面是编译好的二进制软件，可以直接运行的，针对不同系统分了几个目录 ，<br>这几个目录很明了不用解释了。路由器系统 包括 ddwrt openwrt tomato 等都是基于Linux的系统<br>选择Linux目录。这里有根据cpu不同分了几个目录<br>arm 有一部分路由器是目前相对少一些<br>Intel  很熟了 x86的一般很少有成品的路由器 ，很多都是软路由，<br>mips  绝大数的路由器都是mips 的  bcm artheros的基本都是<br>ppc  sparc32 这个很少见了，不是主流的，一些特殊设备<br>进入mips 目录又有2个目录 big-endian  little-endian<br>俗称 大端 小端 ，意思是一个数据在内存地址中按什么样的顺序存储<br>大体意思<span style="color: #ff0000;">小端 高位 存在高地址 低位存在低地址 大端 高位存低地址 低位存高地址 </span><span style="color: #000000;">详情百度</span><br><span style="color: #000000;">不同cpu 系统 使用的方式不一样，我知道的不全不一定准确</span><br><span style="color: #000000;">至少</span><span style="color: #ff0000;"> mips 的ar的cpu是大端的 big-endian </span><span style="color: #000000;">。选择big-endian</span><br><span style="color: #333333;"><span style="font-family: arial, 宋体, sans-serif;">我们常用的X86结构是小端模式，而KEIL C51则为大端模式。很多的ARM，DSP都为小端模式。有些ARM处理器还可以由硬件来选择是大端模式还是小端模式。</span></span><br><span style="font-family: arial, 宋体, sans-serif;"><span style="color: #333333;">大小端序 还和系统有关 具体情况具体分析</span></span><br><span style="font-family: arial, 宋体, sans-serif;"><span style="color: #333333;">big-endian目录里面有分几个目录</span></span><br><span style="font-family: arial, 宋体, sans-serif;"><span style="color: #333333;">这里是根据使用的c语言运行库来区分的</span></span><br><span style="font-family: arial, 宋体, sans-serif;"><span style="color: #333333;">x86的Linux系统 一般都是用的glibc 这个库</span></span><br><span style="font-family: arial, 宋体, sans-serif;"><span style="color: #333333;">嵌入式的Linux 用的是uclibc 这个库</span></span><br><span style="font-family: arial, 宋体, sans-serif;"><span style="color: #333333;">static 是静态的意思，这里软件不依赖共享的运行库 自己用的自己带了。但是体积大了。</span></span><br><span style="font-family: arial, 宋体, sans-serif;"><span style="color: #333333;">openwrt 之类都是用的uclibc这个库</span></span><br>进入uclibc这个目录 就是软件了<br>ar71xx 91xx的就选择vlmcsd-mips32r2-openwrt-atheros-ar7xxx-ar9xxx-uclibc这个</p>
<p>vlmcs 是客户端测试 vlmcs − a client for testing and/or charging KMS servers<br>vlmcsd 是一个完整的kms激活服务器 vlmcsd - a fully Microsoft compatible KMS server<br>vlmcsd 包含上面2个的功能 vlmcsdmulti - a multi-call binary containing vlmcs(1) and vlmcsd(8)<br>只用来做激活服务器选用vlmcsd就可以了。</p>
<p>激活方法及命令：<br><strong><span style="font-size: x-large;">Windows 激活命令：</span></strong></p>
<p><div align="left"><span style="font-size: x-large;">CD “%SystemRoot%\SYSTEM32″</span></div></p>
<p><div align="left"><span style="font-size: x-large;">CSCRIPT /NOLOGO SLMGR.VBS /SKMS 192.168.0.xxx</span></div></p>
<p><div align="left"><span style="font-size: x-large;">CSCRIPT /NOLOGO SLMGR.VBS /ATO</span></div></p>
<p><div align="left"><span style="font-size: x-large;">CSCRIPT /NOLOGO SLMGR.VBS /XPR</span></div><br><strong><span style="font-size: x-large;">Office/Project/Visio 2013(2010换下安装路径) 激活命令：</span></strong></p>
<p><div align="left"><span style="font-size: x-large;">32位：CD “%ProgramFiles(x86)%\MICROSOFT OFFICE\OFFICE15″</span></div></p>
<p><div align="left"><span style="font-size: x-large;">64位：CD “%ProgramFiles%\MICROSOFT OFFICE\OFFICE15″</span></div></p>
<p><div align="left"><span style="font-size: x-large;">CSCRIPT OSPP.VBS /SETHST:192.168.0.xxx</span></div></p>
<p><div align="left"><span style="font-size: x-large;">CSCRIPT OSPP.VBS /ACT</span></div></p>
<p><div align="left"><span style="font-size: x-large;">CSCRIPT OSPP.VBS /DSTATUS</span></div></p>
<p><div align="left"></div></p>
<p><div align="left"></div></p>
<p><div align="left"></div></p>
<p><div class="quote"></div></p>
<blockquote>
<div align="left"><br><br><div align="left">注意：本帖的目的是在你已经搭建私有kms激活服务器的情况下，使局域网内电脑可以自动发现kms服务器而进行免配置激活的。</div>

<div align="left">应用前提是你已经搭好了KMS服务器！</div>

<div align="left">在openwrt上搭建KMS：</div>

<div align="left"><a href="http://www.right.com.cn/forum/thread-174287-1-1.html" target="_blank" rel="external">http://www.right.com.cn/forum/thread-174287-1-1.html</a></div>

<div align="left">在cubieboard、树莓派等ARM盒子搭建py-KMS的教程：</div>

<div align="left"><a href="http://www.cnblogs.com/bitspace/" target="_blank" rel="external">http://www.cnblogs.com/bitspace/</a></div>

<p></p></div><br><p></p>
<div class="quote"><br><div align="left">结合 @<a href="http://www.right.com.cn/forum/space-uid-246879.html" target="_blank" rel="external">Vincent-Emiya</a> 的测试发现，可以使用DNS指向任意公共的KMS激活服务器实现激活局域网内的主机。这可能是有史以来最便捷的KMS激活方案了。</div>

<div align="left">想象下，只要配置好路由器的DNS，然后不用架设KMS服务器，不用安装小工具，也不要执行任何命令。只要把电脑接入你的局域网，你的系统和office就可以自动激活~不要方便太多</div>

<p><div align="left">具体方法20楼：<a href="http://www.right.com.cn/forum/forum.php?mod=redirect&amp;goto=findpost&amp;ptid=174651&amp;pid=1111580" target="_blank" rel="external">http://www.right.com.cn/forum/fo … =174651&amp;pid=1111580</a></div><br></p></div><br><p></p>
<p><div align="left"><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">相信很多人都在自己的局域网内搭建了自己的私有kms激活服务器，比如：<a href="http://www.right.com.cn/forum/thread-174287-1-1.html" target="_blank" rel="external">http://www.right.com.cn/forum/thread-174287-1-1.html</a>。</span></span></div></p>
<p><div align="left"><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">可以说py-kms与vlmcsd的适用性真的非常之广，不管你在windows，linux下甚至安卓下都可以搭建私有的kms服务。但是最后都会遇到的问题是需要在被激活主机上运行批处理命令，不免有些繁琐。</span></span></div></p>
<p><div align="left"><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">曾闻中国某高等学府批量购买企业windows许可，你的电脑只要连入校园网，不需要任何配置就可以激活系统，不免神往。查资料发现，这是通过配置DNS服务器的SRV项实现局域网内主机自动发现kms激活服务器的。</span></span></div></p>
<p><div align="left"><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">刚好我的路由器跑着openwrt系统，可以配置dnsmasq提供SRV功能，于是ssh进入路由器后台，在/etc/dnsmasq.conf中添加配置：</span></span></div></p>
<p><div class="blockcode"></div></p>
<div id="code_AMR">

</div></blockquote>
<ol>
<li>srv-host=_vlmcs.<em>tcp.lan,cubietruck.lan,1688,0,100<br>
</em>复制代码_</li>
</ol>
<p></p>
<p><div align="left"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;"><span style="color: #000000;">其中 _vlmcs._tcp 为服务名；lan 为我的内网域名</span><span style="color: #ff0000;">(这里要改成你的内网域名，一般都是lan)</span><span style="color: #000000;">；cubietruck.lan为我的KMS服务器在内网的地址</span></span><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">(这里要改成你的内网KMS服务器地址)</span><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">；1688为kms激活服务默认端口号；0为优先级；100为权重。</span></span></div></p>
<p><div align="left"><span style="font-size: x-large;"><span style="color: #ff0000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">注意需要修改：</span>cubietruck.lan 为你的KMS主机实际所在的地址！</span></span></div></p>
<p><div align="left"></div></p>
<p><div class="quote"></div></p>
<blockquote>
<div align="left"><span style="color: #000000;"><span style="font-size: medium;">比如你的KMS服务器架设在路由器上，而路由器的主机名为：openwrt</span></span></div>

<div align="left"><span style="font-size: medium;"><span style="color: #000000;">你的局域网域名后缀为lan（一般都是lan）</span></span></div>

<p><div align="left"><span style="font-size: medium;"><span style="color: #000000;">那么你的路由器地址为：openwrt.lan</span></span></div><br><br>其中路由器主机名可以在luci界面的状态页面看到，本地域名后缀可以在dns设置页面看到。</p>
</blockquote>
<p></p>
<p><div align="left"><span style="font-size: medium;"><span style="color: #000000;"> </span></span></div></p>
<p><div align="left"><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">然后在路由器中重启dnsmasq服务</span></span></div></p>
<p><div align="left">/etc/init.d/dnsmasq restart</div></p>
<p><div align="left"><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">切换至windows验证dns配置是否正确，打开命令提示符，运行命令：</span></span></div></p>
<p><div align="left">nslookup -type=srv _vlmcs._tcp.lan</div></p>
<p><div align="left"></div></p>
<p><div align="left"><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">其中 _vlmcs._tcp 表示kms服务类型，lan为我的局域网域名称。</span></span></div></p>
<p><div align="left"><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">看到返回信息：</span></span></div></p>
<p><div align="left"></div></p>
<p><div class="blockcode"></div></p>
<p><div id="code_cY4"></div></p>
<p><pre class="lang:default decode:true">_vlmcs._tcp.lan SRV service location:</pre></p>
<pre><code>priority       = 0

weight         = 100

port           = 1688

svr hostname   = cubietruck.lan
</code></pre><p>cubietruck.lan  internet address = 192.168.1.126<br><br><br></p>
<p><div align="left"><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">说明dns配置正确。</span></span></div></p>
<p><div align="left"><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">这时候看看我自己电脑上的office能不能成功发现kms服务器，还是在管理员权限下运行命令：</span></span></div></p>
<p><div class="blockcode"></div></p>
<p><div id="code_f7D"></div></p>
<p><pre class="lang:default decode:true ">CD “%ProgramFiles(x86)%\MICROSOFT OFFICE\OFFICE15”</pre></p>
<p>CSCRIPT OSPP.VBS /remhst</p>
<p>CSCRIPT OSPP.VBS /act</p>
<p>CSCRIPT OSPP.VBS /dstatus<br>&nbsp;</p>
<p><br></p>
<p><div align="left"><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">其中第一行表示清除之前设置的kms激活服务器地址，第二行手动激活，第三行显示激活状态。最终看到信息</span></span></div></p>
<p><div class="blockcode"></div></p>
<p><div id="code_AY6"></div></p>
<p><pre class="lang:default decode:true ">REMAINING GRACE: 180 days  (259200 minute(s) before expiring</pre></p>
<p>Last 5 characters of installed product key: XTGCT</p>
<p>Activation Type Configuration: ALL</p>
<pre><code>KMS machine name from DNS: cubietruck.lan:1688

Activation Interval: 120 minutes

Renewal Interval: 10080 minutes

KMS host caching: Enabled
</code></pre><hr>
<hr>
<p>—Exiting—————————–<br>&nbsp;</p>
<p><br></p>
<p><div align="left"><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">其中</span></span></div></p>
<p><div align="left"></div></p>
<p><pre class="lang:default decode:true">KMS machine name from DNS: cubietruck.lan:1688</pre><br></p>
<p><div align="left"><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">表示能够根据DNS自动发现局域网内的kms激活服务器为cubietruck.lan。</span></span></div></p>
<p><div align="left"><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">说明office可以完全免配置自动激活。</span></span></div></p>
<p><div align="left"><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">以后任何电脑只要连接入我的局域网，即可对其VOL版本的office以及windows进行自动激活工作。cool~</span></span></div></p>
<p><div align="left"><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">参考：</span></span></div></p>
<p><div align="left"><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;"><a href="http://blog.14401.cn/post-166.html" target="_blank" rel="external">http://blog.14401.cn/post-166.html</a></span></span></div></p>
<p><div align="left"><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;"><a href="http://www.cnblogs.com/zhuangxuqiang/archive/2009/04/28/1445113.html" target="_blank" rel="external">http://www.cnblogs.com/zhuangxuqiang/archive/2009/04/28/1445113.html</a></span></span></div></p>
<p><div align="left"><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;"><a href="https://support.microsoft.com/en-us/kb/816587" target="_blank" rel="external">https://support.microsoft.com/en-us/kb/816587</a></span></span></div></p>
<p><div align="left"><span style="color: #000000;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;"><a href="http://www.cnblogs.com/bitspace/" target="_blank" rel="external">http://www.cnblogs.com/bitspace/</a></span></span></div><br><br>&nbsp;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.right.com.cn/forum/thread-174651-1-2.html&quot;&gt;http://www.right.com.cn/forum/thread-174651-1-2.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.right.com.cn/forum/thread-174287-1-1.html&quot;&gt;http://www.right.com.cn/forum/thread-174287-1-1.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.right.com.cn/forum/thread-159625-1-1.html&quot;&gt;http://www.right.com.cn/forum/thread-159625-1-1.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;openwrt luci&lt;/p&gt;
&lt;p&gt;具体安装位置如下：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&quot;lang:default decode:true &quot;&gt;/etc/vlmcsd.ini&lt;br&gt;/usr/sbin/vlmcsd&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;a href=&quot;http://www.leimingshan.com/wp-content/uploads/2015/10/vlmcsd-svn812-2015-08-30-Hotbird64.7z&quot;&gt;vlmcsd-svn812-2015-08-30-Hotbird64&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Password: 2015&lt;/p&gt;
&lt;p&gt;具体激活使用方法：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&quot;lang:default decode:true &quot;&gt;slmgr.vbs /skms 192.168.1.1&lt;br&gt;slmgr.vbs /ipk XXXXX-XXXXX-XXXXX-XXXXX-XXXXX&lt;br&gt;slmgr.vbs /ato&lt;br&gt;slmgr.vbs /xpr&lt;/p&gt;
&lt;p&gt;cd C:\Program Files\Microsoft Office\Office15&lt;br&gt;cscript ospp.vbs /sethst:192.168.1.1&lt;br&gt;cscript ospp.vbs /act&lt;br&gt;cscript ospp.vbs /dstatus&lt;/pre&gt;&lt;br&gt;
    
    </summary>
    
      <category term="网站" scheme="http://leimingshan.github.io/categories/%E7%BD%91%E7%AB%99/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript的模块化编程</title>
    <link href="http://leimingshan.github.io/2015/08/31/javascript-module/"/>
    <id>http://leimingshan.github.io/2015/08/31/javascript-module/</id>
    <published>2015-08-31T07:32:02.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2 … ule_definition.html</a><br>为什么讲到JS的模块化编程，也是最近在应用Echarts图标库需要面对的一个问题。<br>可以参考Echarts引入的方法：<br><a href="http://echarts.baidu.com/doc/doc.html#" target="_blank" rel="external">http://echarts.baidu.com/doc/doc.html#</a>引入ECharts<br>在之前的开发中，为了使用简便，直接采用第三种引入单文件的方式，比较简单，<br>&lt;script src=”js/echarts-all.js”&gt;&lt;/script&gt;<br>就可以了，这样就引入了Echarts所有的图标和地图数据，这个文件是900KB，也就是说，<br>无论你在页面中使用几种图表，都需要加载接近1MB大小的JS库文件，效率还是比较低下的。<br>比较推荐的方法是参考JS的模块化编程和AMD规范，当然使用模块化编程主要不是为了解决<br>加载过多的问题，对于代码的规范和质量都有比较大的帮助。<br>Echarts本身使用了require.js，在前台开发中也可以尝试自己使用require.js。<br>简单介绍：<a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2012/11/require_js.html</a><br>官网：<a href="http://requirejs.org/" target="_blank" rel="external">http://requirejs.org/</a></p>
<p>建议推荐一个SeaJS 的 CMD 规范，与 AMD 非常类似，在国内的影响力非常大，也非常易于使用，是国人开发的，在 github 上的更新、互动非常频繁。<br><a href="http://seajs.org/" target="_blank" rel="external">http://seajs.org</a><br><a href="https://github.com/seajs/seajs" target="_blank" rel="external">https://github.com/seajs/seajs</a></p>
<p>两个的区别<br><a href="http://www.zhihu.com/question/20351507/answer/14859415" target="_blank" rel="external">http://www.zhihu.com/question/20351507/answer/14859415</a></p>
<p><a href="http://segmentfault.com/a/1190000000733959" target="_blank" rel="external">http://segmentfault.com/a/1190000000733959</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng
    
    </summary>
    
      <category term="网站" scheme="http://leimingshan.github.io/categories/%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="JavaScript" scheme="http://leimingshan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB的数据库复制</title>
    <link href="http://leimingshan.github.io/2015/08/31/mongodb-copy-database/"/>
    <id>http://leimingshan.github.io/2015/08/31/mongodb-copy-database/</id>
    <published>2015-08-31T06:20:14.000Z</published>
    <updated>2016-10-31T05:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>在MongoDB的客户端可以使用如下命令：<br>db.copyDatabase(“abc”, “abc-tmp”, “localhost”)<br>数据库文件较大的话会需要一段时间。</p>
<p>1，复制数据库，使用copyDatabase命令完成复制数据库，<br>格式:copyDatabase(fromdb,todb,fromhost[,username,password])<br>fromdb：源数据库名称<br>todb：目标数据库名称<br>fromhost：源数据库地址，本地和远程都可以<br>username：远程数据库用户名<br>password：远程数据密码<br>例子：将本地db2库复制本地，并重命名db1<br>&gt; db.copyDatabase(“db2”,”db1”,”localhost”)<a id="more"></a><br>2，刷新磁盘：将内存中尚未写入磁盘的信息写入磁盘，并锁住对数据库更新的操作，但读操作可以使用，使用runCommand命令,这个命令只能在admin库上执行<br>格式：db.runCommand({fsync:1,async:true})<br>async：是否异步执行<br>lock:1 锁定数据库</p>
<p>3，数据压缩：mongodb的存储结构采用了预分配的机制，长期不断的操作，会留下太多的的碎片，从而导致数据库系统越来越慢。<br>repairDatabase命令是mongodb内置的一个方法，它会扫描数据库中的所有数据，并将通过导入/导出来重新整理数据集合，将碎片清理干净<br>现在看压缩前和压缩后的对比数据，如下所示：<br>PRIMARY&gt; db.t1.storageSize()<br>65232896<br>PRIMARY&gt; db.t1.totalSize()<br>81470432<br>PRIMARY&gt; db.repairDatabase()<br>{ “ok” : 1 }<br>PRIMARY&gt; db.t1.storageSize()<br>65232896<br>PRIMARY&gt; db.t1.totalSize()<br>79851584</p>
<p>4，当然也支持复制Collection，与复制Database类似。</p>
<p>&nbsp;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在MongoDB的客户端可以使用如下命令：&lt;br&gt;db.copyDatabase(“abc”, “abc-tmp”, “localhost”)&lt;br&gt;数据库文件较大的话会需要一段时间。&lt;/p&gt;
&lt;p&gt;1，复制数据库，使用copyDatabase命令完成复制数据库，&lt;br&gt;格式:copyDatabase(fromdb,todb,fromhost[,username,password])&lt;br&gt;fromdb：源数据库名称&lt;br&gt;todb：目标数据库名称&lt;br&gt;fromhost：源数据库地址，本地和远程都可以&lt;br&gt;username：远程数据库用户名&lt;br&gt;password：远程数据密码&lt;br&gt;例子：将本地db2库复制本地，并重命名db1&lt;br&gt;&amp;gt; db.copyDatabase(“db2”,”db1”,”localhost”)
    
    </summary>
    
      <category term="数据库" scheme="http://leimingshan.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="NoSQL" scheme="http://leimingshan.github.io/tags/NoSQL/"/>
    
      <category term="MongoDB" scheme="http://leimingshan.github.io/tags/MongoDB/"/>
    
  </entry>
  
</feed>
